#!/bin/bash
#
#
# Manage, customize, or burn an SSD or SD Card from a RasPiOS image
#
# Useful for maintaining one or more Pis. The general idea is to keep a "golden" image
# fully configured to suit your needs. Then, whenever you need a new SSD or SD Card (testing, new Pi, etc),
# start with the golden master. Also, when new RasPiOS releases come out, sdm can be used
# to easily build a customized fresh image for the new release.
#
# This script provides the infrastructure for your customization scripts to work
# in a repeatable manner against an official RasPiOS IMG file. 
#
# sdm [switches] image-name
# sdm --help will provide help on all available switches
#
# RPi Image management phases. See README.md for details
# Phase   Tasks
#     0   Copy files into unzipped IMG file (sdm calls phase0 script)
#         IMG file mounted so files can easily be copied into the IMG file
#     1   Nspawn into image to execute in the image context (via sdm)
#         APT packages can be installed in phase 1 so available on every SD card
#         Your custom script can be as automatic or manual as you choose
#         See sdm-customphase for an example
#     2   Write SSD or SD card from the IMG file (via sdm --burn)
#         Target system name is inserted onto the device after it's written
#     3   Boot the newly-created storage device
#

function errexit() {
    echo -e "$1"
    exit 1
}

function ferrexit() {
    [ "$1" != "" ] && printf "$1"
    exit 1
}

function exitiferr() {
    [ "${1:0:1}" == "?" ] && errexit "$1"
}

function docleanup() {
    #
    # $1: if 'keep' (don't unset SDMPT)
    local mnt=$SDMPT
    [ "$mnt" == "" ] && mnt=/mnt/sdm
    ismounted $mnt/boot && umount -v $mnt/boot
    ismounted $mnt && umount -v $mnt
    if [ "$1" != "keep" ]
    then
	[ "$SDMPT" != "/mnt/sdm" ] && rm -rf $SDMPT
	unset SDMPT
    fi
    [ "$loopdev" != "" ] && losetup -d $loopdev && loopdev=""
    sync
}

function ctrlcexit() {
    [ "$icolors" == "1" ] && resetcolors xt
    ferrexit "%% Exiting...\n"
}

function doexit() {
    trap "doexit" SIGINT
    [ "$icolors" == "1" ] && resetcolors xt
    docleanup
    exit
}

function ismounted() {
    #
    # Trailing space to distinguish "/mnt/sdm" from "/mnt/sdm.44443"
    #
    if grep -qs "$1 " /proc/mounts
    then
	return 0
    else
	return 1
    fi
}

function notmounted() {
    if grep -qs $1 /proc/mounts
    then
	return 1
    else
	return 0
    fi
}

function getmtpt() {
    if ! ismounted /mnt/sdm
    then
	echo "/mnt/sdm"
    else
	if ismounted /mnt/sdm.${BASHPID}
	then
	    errexit "? Alternate mount point /mnt/sdm.${BASHPID} in use"
	fi
	echo "/mnt/sdm.${BASHPID}"
    fi
}

function makemtpt() {
    local sdmpt=$(getmtpt)
    [ ! -d $sdmpt ] && mkdir -p $sdmpt
    echo $sdmpt
}

function islooped() {
    #
    # Returns true if file in $1 is already looped
    #
    local fn=$(realpath $1) fl=1
    while read line
    do
        [[ "$line" = "$fn" ]] && fl=0
    done < <(losetup -a)

    return $fl
}

function domount() {
    #
    # Before calling domount:
    #      declare -x SDMPT=$(makemtpt)
    #
    local p1="1" p2="2"
    local mimg=$1

    [ ! -d $SDMPT ] && mkdir $SDMPT
    if [ $fdirtree -eq 1 ]
    then
	ismounted $(realpath $dimg) && errexit "? Directory '$dimg' is already mounted"
	mount --bind $dimg $SDMPT
	notmounted $SDMPT && errexit "? Error mounting --bind '$dimg'"
	mount --bind $dimg/boot $SDMPT/boot
	notmounted $SDMPT/boot && errexit "? Error mounting --bind '$dimg'"
    elif [ $dimgdev -eq 0 ]
    then
    [ "$loopdev" != "" ] && losetup -d $loopdev && loopdev=""
	islooped $mimg && errexit "? IMG '$mimg' already attached to a loop device"
	echo "* Mount IMG '$mimg'"
	loopdev=$(losetup --show -P -f $mimg)
	mount -v ${loopdev}p2 $SDMPT
	notmounted $SDMPT && errexit "? Error mounting IMG '$mimg'"
	mount -v ${loopdev}p1 $SDMPT/boot
	notmounted $SDMPT/boot && errexit "? Error mounting IMG '$mimg'"
    else
	[[ "$dimg" =~ "mmcblk" ]] && p1="p1" && p2="p2"
	ismounted $dimg${p1} && errexit "? Device $dimg is already mounted"
	ismounted $dimg${p2} && errexit "? Device $dimg is already mounted"
	echo "* Mount device '$dimg'"
	mount -v ${dimg}${p2} $SDMPT
	notmounted $SDMPT && errexit "? Error mounting IMG '$dimg'"
	mount -v ${dimg}${p1} $SDMPT/boot
	notmounted $SDMPT/boot && errexit "? Error mounting IMG '$dimg'"
	loopdev=""
    fi
}

function checknumeric() {
    #
    # Exit with error if $1 is not numeric
    #
    [[ "$1" = *[^0-9]* ]] && errexit "? Value '$1' for command switch '$2' is not numeric"
    return
}

function fndotfullpath() {
    #
    # Fix directory if it's "."
    #
    local fn="$1"
    if [ "$fn" != "" ]
    then
	[ "$(dirname $fn)" == "." ] && fn="$(pwd)/$fn"    # Ensure fully qualified path to cscript
    fi
    echo $fn
}

function write_premsg() {
    #
    # $1 has the message to write
    # It's written to the terminal and added to burnmsg
    #
    cmsgs+=("$1")
    #echo "$1"
    return 0
}

function extendimage() {
    local ldimg=$1 limgext=$2
    local line dsiz
    trap "ctrlcexit" SIGINT
    dd if=/dev/zero bs=1M count=$limgext status=progress >> $ldimg 
    ddsts=$?
    trap SIGINT
    [ $ddsts -ne 0 ] && errexit "? Exiting due to dd error"
    # Get the actual size of the image file from parted
    while read line ; do
	if [[ "$line" =~ "Disk" ]] 
	then
	    if [[ ! "$line" =~ "Flags:" ]]   # Only want the Disk size line, not one with "Disk Flags"
	    then
                                     # Disk img-file-name.img:    nnnnMB
		dsiz="${line##*:}"   # Get String following ":"
		dsiz="${dsiz##\ }"   # Strip leading spaces
		dsiz="${dsiz%%\ }"   # Strip trailing spaces
	    fi
	fi
    done < <(parted -s $ldimg print)
    echo "* Resize partition 2 of '$ldimg"
    parted $ldimg -s resizepart 2 $dsiz
}

function extendandresize() {
    #
    # IMG must not be mounted
    # Leaves IMG mounted on completion
    #
    echo "* Extend $dimgdevname by ${imgext}MB..."
    extendimage "$dimg" "$imgext"
    #
    # Mount the image file into a loop device and resize the file system
    #
    echo "* Remount $dimgdevname to resize the file system"
    [ "$SDMPT" == "" ] && declare -x SDMPT=$(makemtpt)
    domount "$dimg"
    echo "* Resize the file system"
    echo "% (Ignore on-line resizing message)"
    resize2fs ${loopdev}p2
}    

function poptcheck() {
    #
    # Check options settings against valid settings
    # Report errors and exit
    #
    local popt="$1" vopt="$2" switchname="$3" badopt="" nopt="" xopt=() o os badopt
    if [ "$popt" != "" ]
    then
	IFS="," read -a xopt <<< "$popt"
	for os in "${xopt[@]}"
	do
	    if ! [[ "$vopt" =~ "|$os|" ]]
	    then
		[ "$badopt" != "" ] && badopt="$badopt, '$os'" || badopt="'$os'"
	    else
		nopt="$nopt|$os"
	    fi
	done
	[ "$badopt" != "" ] && echo "? Unrecognized $switchname value(s) $badopt" || echo "$nopt|"
    else
	echo ""
    fi
}

function findappfile() {
    #
    # $1 = app/xapp variable
    # $2 = app/xapp output variable
    #
    # Updates app/xapp output variable with actual file location
    # or the value of $1 if it's not a file location (no leading '@')
    #
    local fn fnc
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	fn="$(fndotfullpath $fn)"
	if [ ! -f "$fn" ]
	then
	    fnc="$src/$(basename $fn)"
	    if [ ! -f "$fnc" ]
	    then
		echo "? $2 file '$fn' not found"
		return
	    else
		echo "@$fnc"
	    fi
	else
	    echo "@$fn"
	fi
    else
	echo "$1"
    fi
}

function getapplist() {
    #
    # $1 has list of apps or @file with list of apps
    # Returns the app list as the function result
    #
    local lapps="" newapp fn
    if [ "${1:0:1}" == "@" ]
    then
	fn="${1:1:999}"
	while read line
	do
	    #
	    # Strip trailing spaces, tabs, and comments
	    #
            newapp="${line%%\#*}"    # Del EOL comments
            newapp="${newapp%"${newapp##*[^[:blank:]]}"}"  # Del trailing spaces/tabs
	    [ "$newapp" != "" ] && lapps="$lapps $newapp"
	done < $fn
    else
	lapps="$1"
    fi
    lapps="${lapps## }"      # Del leading spaces
    echo "$lapps"
}

function readl10n() {
    #
    # Get the L10N config from the running system
    # Sets: locale, timezone, wificountry, keymap
    #
    local tz=$(realpath /etc/localtime)
    # Keyboard
    if [ -f /etc/default/keyboard ]
    then
	source /etc/default/keyboard
    else
	logtoboth ">%/etc/default/keyboard missing; Keyboard set to 'us'"
	XKBLAYOUT="us"
    fi
    keymap="$XKBLAYOUT"
    # Locale
    source /etc/default/locale
    locale="$LANG"
    # Timezone
    timezone=${tz##/usr/share/zoneinfo/}
    # WiFi Country
    [ -f /etc/wpa_supplicant/wpa_supplicant.conf ] && IFS="=" read a wificountry <<<$(grep 'country=' /etc/wpa_supplicant/wpa_supplicant.conf)
    [ "$wificountry" == "" -a -f /etc/wpa_supplicant/wpa_supplicant-wlan0.conf ] && IFS="=" read a wificountry <<<$(grep 'country=' /etc/wpa_supplicant/wpa_supplicant-wlan0.conf)
}

function checkfilelist() {
    #
    # $1 has list of "|"-separated files
    # $2 has name of switch (--switchname)
    local citems=() fl
    IFS="|" read -a citems <<< "$1"
    for fl in "${citems[@]}"
    do
	[ ! -f $fl ] && errexit "? $2 file '$fl' not found"
    done
}

function printhelp() {
    echo $"sdm $version
Usage:
 sudo /usr/local/sdm/sdm --customize [switches] sd-image-file
   Customize an SD Card image or SSD/SD Card
 sudo $0 --explore sd-image-file
   Explore an SD Card image or SSD/SD Card
 sudo $0 --burn /dev/sdx --host target-hostname sd-image-file
   Burn the SD Card image to the burn device
 sudo $0 --shrink sd-image-file
   Shrink sd-image-file to the smallest possible size
 sudo $0 --mount sd-image-file
   Mount an SD Card image or an SSD/SD Card
 sudo $0 --aptmaint aptfunction sd-image-file
   Do APT maintenance (update, upgrade) on an SD Card image or SSD/SD Card
 sudo $0 --ppart sd-image-file
   Print partition tables in sd-image-file

Commands
 --burn devname      Copy the image to the storage device
 --burnfile filename Create a ready-to-burn customized Image file
 --customize         Customize the specified Image file
 --explore           Explore (nspawn shell) into image
 --info what         Display list of Locales, Keymaps, WiFi Countries, or Timezones
 --mount             Mount IMG file partitions and drop into interactive bash shell
 --ppart             Print partition tables in an IMG
 --shrink            Shrink an IMG file 
Command Switches for --customize and --burn or as noted
 --1piboot conf-file Use alternate 1piboot.conf
 --apps applist      List of app packages to install or @file with list
 --xapps applist     List of X11 packages to install or @file with list
 --apip IPADDR       IP Address for WiFi Captive Portal [10.1.1.1]
 --apssid ssidname   SSID name for WiFi Captive Portal [sdm]
 --apt-dist-upgrade  Use apt-get dist-upgrade instead of upgrade 
 --aptcache IPADDR   Use apt-cacher-ng with server 'IPADDR'
 --aptmaint options  Do apt commands batch-mode in the image (update, upgrade, autoremove)
 --autologin         Auto-login to the console (Lite) or graphical desktop session
 --batch             Perform customize operation and exit
 --b0script script   Script to run after burn has completed
 --b1script script   Like --b0script, but done in nspawn (can do both b0script and b1script)
 --bootadd key:value,key:value,... Add new keys and values to /boot/config.txt
 --bootconfig key:value,key:value,... Update and uncomment items in /boot/config.txt
 --bootset key:value,key:value,.. Set boot-time device settings (see README)
 --bootscripts       Run the scripts /usr/local/sdm/1piboot/0*-*.sh during first boot
 --cron-d file       Copy provided cron file to /etc/cron.d (can be used multiple times)
 --cron-daily file   Copy provided cron file to /etc/cron.daily (can be used multiple times)
 --cron-hourly file  Copy provided cron file to /etc/cron.hourly (can be used multiple times)
 --cron-monthly file Copy provided cron file to /etc/cron.monthly (can be used multiple times)
 --cron-weekly file  Copy provided cron file to /etc/cron.weekly (can be used multiple times)
 --cron-systemd      Disable cron service and enable systemd-based timers
 --cscript script    Custom Phase Configuration script
 --csrc dir          Source directory passed for Custom Phase scripts
 --custom[1-4] str   Can be used in Custom cscripts
 --datefmt str       Date format for logs [%Y-%m-%d %H:%M:%S]
 --ddsw str          Switches for dd command [bs=16M iflag=direct]
 --debug apt         Enable debug features. apt=do single apt install for each package in apps,xapps
 --disable arg,arg   Disables specific complex services (bluetooth,piwiz,swap,triggerhappy,wifi)
 --directory         sd-image-file is a directory tree rather than an IMG
 --dhcpcd file       Append file to /etc/dhcpcd.conf
 --dhcpcdwait        Enable dhcpcd Wait for Internet
 --domain name       Domain name (for use in Custom Phase Script; sdm does not use)
 --dtoverlay         Add dtoverlay=string setting to /boot/config.txt (can be used multiple times)
 --dtparam           Add dtparam=string setting to /boot/config.txt (can be used multiple times)
 --ecolors fg:bg:cur Set fg/bg/cursor colors when operating in the mounted IMG
 --eeprom str        Set the Pi eeprom directory
 --expand-root       Expand the root partition after burning it to a device
 --exports file      Copy named file to /etc/exports
 --extend            Extend the image by --xmb N MB [Default: 2048/2GB]
 --fstab file        Append file to /etc/fstab
 --gadget-mode       Configure the image for gadget mode (network over USB)
 --groups list,of,groups Use this list of groups for user created with --user
                     [dialout,cdrom,floppy,audio,video,plugdev,users,adm,sudo,users,input,netdev,spi,i2c,gpio]
 --hdmi-force-hotplug Set hdmi_force_hotplug=1 in /boot/config.txt
 --hdmi-ignore-edid  Set hdmi_ignore_edid=0xa5000080 in /boot/config.txt
 --hdmigroup n       Set /boot/config.txt hdmigroup value
 --hdmimode n        Set /boot/config.txt hdmimode value
 --host hostname     Hostname to write onto the storage device with --burn
 --hotspot config    Configure the image with a WiFi hotspot using hostapd
 --journal type      Controls system journal (D:syslog; Or persistent, volatile, none)
 --keymap keymapname Set Keymap
 --L10n              Set Keymap, Locale, Timezone, and WiFi Country from running system
 --loadlocal args    Load WiFi Credentials from USB stick during first boot (see README)
 --locale localename Set the Locale
 --logwidth N        Split log lines longer than N characters [Default: 96]
 --lxde-config files See README for details
 --mcolors fg:bg:cur Set fg/bg/cursor colors when operating in --mount
 --modprobe file     Copy provided file to /etc/modprobe.d (can be used multiple times)
 --motd file         Use provided file as /etc/motd
 --mouse left        Enable left-handed mouse if LXDE installed
 --netman            Specify network manager to use (dhcpcd, nm, network-manager)
 --nopassword        Do not require a password during customization
 --nouser            Do not add a new user
 --nowait-timesync   Don't wait for time to sync in sdm-firstboot
 --nspawnsw str      Additional switches for nspawn command
 --password-pi pwd   Set password for Pi user (will prompt if not provided)
 --password-user pwd Set password for the --user user (will prompt if not provided)
 --password-root pwd Set password for root (will prompt if not provided and --rootpwd)
 --password-same y|n Use same password for pi, --user user (if set), and root (if --rootpwd)
 --plugin pname:\"args\" Run plugin pname with the specified args (if multiple, separate with '|'
 --plugin-debug      Print plugin debug messages
 --poptions str      Set Phase 1 auto-run options
 --redact            Redact passwords in /etc/sdm/history and /etc/sdm/cparams when burning
 --norestart         Do not restart after first boot (use on --burn command)
 --os osname         Specify OS in the Image (D:raspios, ubuntu)
 --rclocal string    Add string as a command in /etc/rc.local (can be used multiple times)
 --reboot n          n seconds after first boot has completed restart the system
 --redact            Redact passwords in /etc/sdm/cparams and /etc/sdm/history
 --redo-customize    If image already customized, redo without prompting
 --regen-ssh-host-keys Regenerate system SSH keys at end of FirstBoot
 --rename-pi user    Rename the user 'pi' to the new username rather than creating a new user with --user
 --restart           20 seconds after first boot has completed restart the system
 --rootpwd           Set a root password into the image
 --sdmdir /path/to/sdm Put sdm here instead of /usr/local/sdm when customizing an IMG
 --showapt           Display apt output as well as logging it
 --showpwd           Log password in /etc/sdm/history
 --ssh none|socket|service  No ssh or ssh sockets [Default: ssh service]
 --swap n            Set swap space to nMB (overrides --disable swap)
 --svcdisable svc1,svc2,... Disable the named services
 --svc-disable svc1,svc2,... Disable the named services
 --svcenable  svc1,svc2,... Enable  the named services
 --svc-enable  svc1,svc2,... Enable  the named services
 --sysctl file       Copy the named file to /etc/sysctl.d (can be used multiple times)
 --systemd-config item:file,... Provide config files for systemd functions. See README for details
 --timezone tzname   Set the Timezone
 --udev file         Copy provided udev rules file to /etc/udev/rules.d (can be used multiple times)
 --uid uid           UID for non-root user [next free]
 --user username     Create non-root user
 --vncbase n         Set the base port for virtual VNC connections [5900]
 --wifi-country country Set WiFi Country for unblocking WiFi
 --wpa wpaconf       wpa_supplicant.conf file to use
 --nowpa             Do not do WPA config file processing
 --xmb n             Set the --extend size in MB [2048]
 --version           Print sdm version number"
}

#
# Initialize and Parse the command
#
#
version="V7.9"
sdmcommandline="$0 $@"      #Used in error messages
apip="10.1.1.1"             #Default IP for the WiFi Captive Portal
apssid="sdm"                #Default SSID for the WiFi Captive Portal
apps=""                     #List of apps to install in sdm-base-installs
aptcache=""                 #IP address of apt-cacher-ng server
aptdistupgrade=0            #1=Use apt-get dist-upgrade instead of upgrade
aptmaint=""                 #--aptmaint switch values
aptfunction=0               #1=Some apt batch function specified
autologin=0                 #1=auto-login to console or desktop
b0script=""                 #Customization script to run after burn
b1script=""                 #Like b0script but done in nspawn
bootadd=""                  #Items to add to /boot/config.txt
bootconfig=""               #/boot/config.txt items to set
bootscripts=0               #Run FirstBoot custom boot scripts
bootsetpairs=""             #Keys and values from --bootet
burn=0                      #1=Burn the image to the SD card
burndev=""                  #SD card device name for --burn
burnfile=0                  #1=Burn image to a file
burnfilefile=""             #Filename for --burnfile
chroot=""                   #Set by sdm to chroot type (nspawn, arm, or aarch64)
crond=""                    #List of cron files to copy to /etc/cron.{d,hourly,daily,weekly,monthly}
cronhourly=""
crondaily=""
cronweekly=""
cronmonthly=""
cronsystemd=0               #1=disable cron service and enable systemd cron timers
csrc=""                     #Source directory for use by Custom Phase script
cscript=""                  #Custom Phase script
datefmt="%Y-%m-%d %H:%M:%S" #Default date format for history log
ddpid=""                    #Holds pid of dd during IMG Extend
ddsw="bs=16M iflag=direct"  #Switches for dd
debugs=""                   #Debug settings
dimgdevname=""              #Set to "IMG", "Device", or "Directory" once determined
disables=""                 #Complex services to disable
dhcpcd=""                   #Append this custom dhcpcd.conf to /etc/dhcpcd.conf
dhcpcdwait=0                #1=Enable wait for internet (like raspi-config System Options 'wait for network connection')
domain=""                   #--domain name
dtoverlay=""                #Collected --dtoverlay settings
dtparam=""                  #Collected --dtparam settings
ecolors="blue:gray:red"     #fg:bg:cursor
eeprom=""                   #If set, edit /etc/default/rpi-eeprom-update
expandroot=0                #1=Expand root after burning it to a device
exports=""                  #If set, copy file to /etc/exports
fcustomize=0                #True if customizing an image (either --customize or lack of burn,mount,explore)
fbatch=0                    #1=nspawn "batch" mode (non-interactive). Do Phase1 and exit
fdirtree=0                  #1=source is a directory tree, not an IMG or device
fdomount=0                  #1=Do a mount and drop into bash
fexplore=0                  #1=Just fire up nspawn to explore the system
fextend=0                   #1=extend image by --xmb MB
fextendonly=0               #1=Just extend and exit (this if no other command specified)
fgadgetmode=0               #1=Configure image for gadget mode
fmouse=0                    #1=Set left-handed mouse if LXDE installed
fnopassword=0               #1=Do not require a password during customization
fnowpa=0                    #1=I really man no automatic no wpa config
fppart=0                    #1=Print partition tables in an IMG
frenamepi=0                 #1=--rename-pi selected
fshrink=0                   #1=Shrink the IMG
fupdateplugins=0            #1=Copy any found updated plugins into the burned output
fstab=""                    #Append this custom fstab to /etc/fstab
groups="dialout,cdrom,floppy,audio,video,plugdev,users,adm,sudo,users,input,netdev,spi,i2c,gpio" #Add created users to these groups
hdmiforcehotplug=0          #1=Enable hdmi_force_hotplug in /boot/config.txt
hdmiignoreedid=0            #1=Set hdmiignoreedid=0xa5000080 in /boot/config.txt
hdmigroup=""                #If set, edit /boot/config.txt and set
hdmimode=""                 #If set, edit /boot/config.txt and set
hname=""                    #Host name when using --burn
hostname=""                 #Written to cparams during --burn
hotspot=""                  #WiFi config file
imgext=2048                 #Number of MB to extend IMG (2048MB = 2GB)
journal="syslog"            #Default journal (system log) setting
keymap=""                   #Keyboard configuration
infocmd=0                   #1=--info command
libfmconf=""                #Config file for libfm
loadl10n=0                  #1=Load Localization settings from running system 
loadlocal=""                #Non-null specifies loading wifi creds on firstboot (currently USB only)
locale=""                   #Locale
logwidth=96                 #Split log lines longer than this
loopdev=""                  #Name of mounted loop device
lxdeconfig=""               #Arguments to --lxde-config
lxdeconflist="libfm pcmanfm lxterminal" #These are the configs that we process
lxterminalconf=""           #Config file for lxterminal
mcolors="black:LightSalmon1:blue" #fg:bg:cursor
modprobe=""                 #List of files to copy to /etc/modprobe.d
motd=""                     #File to place as /etc/motd
myuser=""                   #Non-root user to create. Default is no non-root user created
myuid=""                    #UID for non-root user if created
netman="dhcpcd"             #--netman
noreboot=0                  #1=Do not restart system after first boot
nouser=0                    #1=Do not require a user to be specified
nowaittimesync=0            #1=Don't wait for time to sync in sdm-firstboot
os="raspios"                #Default OS for images
nspawnsw=""                 #Switches for nspawn
passwordpi=""               #Values for --password-xxx
passwordroot=""
passwordsame=0              #1=same password for all, -1=--password-same n, 0=not specified
samepwd=""                  #For command parsing only. Set to value of --password-same if specified
passworduser=""
pcmanfmconf=""              #Config file for pcmanfm
plugindebug=0               #1=Enable debugging output
plugins=""                  #List of plugins to include
poptions=""                 #Phase options
pvers=0                     #Print version number
raspiosver=""               #RasPiOS Debian version # (10:Buster, 11:Bullseye)
redact=0                    #1=redact passwords in /etc/sdm/{cparams,history}
renamepi=""                 #Rename the user 'pi' to this
rclocal=""                  #Command(s) to add to /etc/rc.local
reboot=0                    #1=Reboot from First Boot
rebootwait=20               #Number of seconds to wait after systemd thinks system is fully booted to reboot
regensshkeys=0              #1=Regenerate SSH keys at end of FirstBoot
drebootwait=$rebootwait     # Used to see if rebootwait should be modified on burn
redocustomize=0             #1=Don't prompt if image already customized
sdfnlogin=""                #File to augment /etc/systemd/logind.conf
sdfnnetwork=""              #File to augment /etc/systemd/networkd.conf
sdfnresolve=""              #File to augment /etc/systemd/resolved.conf
sdfnsystem=""               #File to augment /etc/systemd/system.conf
sdfntimesync=""             #File to augment /etc/systemd/timesyncd.conf
sdfnuser=""                 #File to augment /etc/ysstemd/user.conf
sdmdir="/usr/local/sdm"     #Where to put sdm when customizing. --sdmdir to change
showpwd=0                   #1=Log password into /etc/sdm/history
ssh=""                      #--ssh none (no ssh) or --ssh socket (ssh via sockets)
                            #  Default is to write /boot/ssh
swapsize=0                  #Set swap size to nMB (overrides --disable swap)
sysctl=""                   #Copy named file to /etc/sysctl.d
systemdconfig=""            #Raw args to --systemd-config
timesyncd=""                #timesynd.conf file to set into the image
timezone=""                 #Timezone setting
udev=""                     #Copy named udev files to /etc/udev/rules.d
wificountry=""              #WiFi country setting
vaptmaintops="|update|upgrade|autoremove|" #Options for --apt
virtmode="nspawn"           #"nspawn" or "chroot"
vdebug="|apt|"              #Valid --debug settings
vpoptions="|apps|nofirstboot|noupdate|noupgrade|noautoremove|nodmconsole|xwindows|xapps|none|" #Valid --poptions
vbootset="|boot_splash|boot_wait|camera|i2c|net_names|onewire|rgpio|serial|spi|blanking|overscan|pixdub|audio|pi4video|boot_behaviour|boot_behavior|overclock|boot_order|powerled|"
vdisableopts="|bluetooth|piwiz|swap|triggerhappy|wifi|"
vjournalopts="|persistent|syslog|volatile|none|"
vloadopts="|usb|wifi|flashled|internet|"  #Valid options for --loadlocal
vosopts="|raspios|raspbian|ubuntu|"
vvirtopts="|nspawn|chroot|"
vncbase="5900"              # Base port for VNC socket services
vqemu=""                    # Qemu architecture to use in chroot
rootpwd=0                   #1=Set root password as well
showapt=0                   #1=Display apt output on terminal as well as logging
xapps=""                    #List of X apps to install in sdm-X-installs
pi1bootconf=""              #Command-line specified 1piboot.conf file to use
wpaconf=""                  #Command-line specified wpa_supplicant.conf
custom1=""                  #For custom use
custom2=""                  #For custom use
custom3=""                  #For custom use
custom4=""                  #For custom use

[[ ! $EUID -eq 0 ]] && errexit "? Please run as root: sudo $0 $*"
src=$(dirname "$(realpath "$0")")
source $src/sdm-cparse           # Get function defs
#
# Parse the command line
#
cmdline="$0 $*"
longopts="help,1piboot:,apps:,aptcache:,apt-dist-upgrade,aptmaint:,apip:,apssid:,\
autologin,b0script:,b1script:,batch,bootadd:,bootconfig:,bootscripts,bootset:,burn:,burnfile:,\
cron-d:,cron-daily:,cron-hourly:,cron-monthly:,cron-weekly:,cron-systemd,\
cscript:,csrc:,customize,datefmt:,ddsw:,debug:,dhcpcd:,dhcpcdwait,directory,disable:,\
domain:,dtoverlay:,dtparam:,ecolors:,eeprom:,explore,expand-root,exports:,extend,\
fstab:,gadget-mode,groups:,hdmi-force-hotplug,hdmi-ignore-edid,hdmigroup:,hdmimode:,host:,hostname:,\
hotspot:,info,journal:,keymap:,L10N,L10n,l10n,loadlocal:,locale:,logwidth:,lxde-config:,\
mcolors:,modprobe:,motd:,mount,mouse:,norestart,noreboot,nouser,nowait-timesync,nspawnsw:,netman:,os:,\
nopassword,password-pi:,password-root:,password-same:,password-user:,plugin-debug,plugin:,plugins:,poptions:,\
ppart,rclocal:,reboot:,redact,redo-customize,regen-ssh-host-keys,rename-pi:,restart,\
rootpwd,sdmdir:,showapt,showpwd,shrink,ssh:,svcdisable:,svc-disable:,svcenable:,svc-enable:,swap:,\
sysctl:,systemd-config:,timesyncd:,timezone:,udev:,uid:,update-plugins,user:,\
vncbase:,wifi-country:,wificountry:,xapps:,xmb:,\
custom1:,custom2:,custom3:,custom4:,version,nowpa,wpa:"

OARGS=$(getopt -o h --longoptions $longopts -n 'sdm' -- "$@")
[ $? -ne 0 ] && errexit "? $0: Unable to parse command"
eval set -- "$OARGS"

while true
do
    case "${1,,}" in
	# 'shift 2' if switch has argument, else just 'shift'
	--1piboot)     pi1bootconf=$2; shift 2 ;;
	--apip)        apip=$2       ; shift 2 ;;
	--apssid)      apssid=$2     ; shift 2 ;;
	--apps)        apps="$2"     ; shift 2 ;;
	--aptcache)    aptcache=$2   ; shift 2 ;;
	--apt-dist-upgrade) aptdistupgrade=1 ; shift 1 ;;
	--aptmaint)    aptmaint="${2,,}"; shift 2 ;;
	--autologin)   autologin=1   ; shift 1 ;;
	--b0script)    b0script=$2   ; shift 2 ;;
	--b1script)    b1script=$2   ; shift 2 ;;
	--batch)       fbatch=1      ; shift 1 ;;
	--bootadd)     bootadd=$2    ; shift 2 ;;
	--bootconfig)  bootconfig=$2 ; shift 2 ;;
	--bootscripts) bootscripts=1 ; shift 1 ;;
	--bootset)     bootsetpairs=$2 ; shift 2 ;;
	--burn)        burn=1 ;
		       burndev=$2    ; shift 2 ;;
	--burnfile)    burnfile=1 ;
		       burnfilefile=$2 ; shift 2 ;;
	--cron-d)      [ "$crond" == "" ] && crond="$2" || crond="$crond|$2" ; shift 2 ;;
	--cron-hourly) [ "$cronhourly" == "" ] && cronhourly="$2" || cronhourly="$cronhourly|$2" ; shift 2 ;;
	--cron-daily)  [ "$crondaily" == "" ] && crondaily="$2" || crondaily="$crondaily|$2" ; shift 2 ;;
	--cron-weekly) [ "$cronweekly" == "" ] && cronweekly="$2" || cronweekly="$cronweekly|$2" ; shift 2 ;;
	--cron-monthly) [ "$cronmonthly" == "" ] && cronmonthly="$2" || cronmonthly="$cronmonthly|$2" ; shift 2 ;;
	--cron-systemd) cronsystemd=1 ; shift 1 ;;
	--cscript)     cscript=$2    ; shift 2 ;;
	--csrc)        csrc=$2       ; shift 2 ;;
	--customize)   fcustomize=1  ; shift 1 ;;
	--datefmt)     datefmt=$2    ; shift 2 ;;
	--ddsw)        ddsw=$2       ; shift 2 ;;
	--debug)       debugs=$2     ; shift 2 ;;
	--dhcpcd)      dhcpcd=$2     ; shift 2 ;;
	--dhcpcdwait)  dhcpcdwait=1  ; shift 1 ;;
        --directory)   fdirtree=1    ; shift 1 ;;
	--disable)     disables="${2,,}" ; shift 2 ;;
	--domain)      domain=$2     ; shift 2 ;;
	--dtoverlay)   [ "$dtoverlay" == "" ] && dtoverlay="$2" || dtoverlay="$dtoverlay|$2" ; shift 2 ;;
	--dtparam)     [ "$dtparam" == "" ]   && dtparam="$2"   || dtparam="$dtparam|$2" ; shift 2 ;;
	--ecolors)     ecolors=$2    ; shift 2 ;;
	--eeprom)      eeprom=$2     ; shift 2 ;;
	--expand-root) expandroot=1  ; shift 1 ;;
	--explore)     fexplore=1    ; shift 1 ;;
	--exports)     exports=$2    ; shift 2 ;;
	--extend)      fextend=1     ; shift 1 ;;
	--fstab)       fstab=$2      ; shift 2 ;;
	--gadget-mode) fgadgetmode=1 ; shift 1 ;;
	--groups)      groups=$2     ; shift 2 ;;
	--hdmi-force-hotplug) hdmiforcehotplug=1 ; shift 1 ;;
	--hdmi-ignore-edid) hdmiignoreedid=1 ; shift 1 ;;
	--hdmigroup)   hdmigroup=$2  ; shift 2 ;;
	--hdmimode)    hdmimode=$2   ; shift 2 ;;
	--hostname|--host) hname=$2  ; shift 2 ;;
	--hotspot)     hotspot=$2    ; shift 2 ;;
	--journal)     journal="${2,,}" ; shift 2 ;;
	--keymap)      keymap=$2     ; shift 2 ;;
	--l10n)        loadl10n=1    ; shift 1 ;;
	--info)        infocmd=1     ; shift 1 ;;
	--loadlocal)   loadlocal="${2,,}" ; shift 2 ;;
	--locale)      locale=$2     ; shift 2 ;;
	--logwidth)    logwidth=$2   ; shift 2 ;;
	--lxde-config) lxdeconfig=$2 ; shift 2 ;;
	--mcolors)     mcolors=$2    ; shift 2 ;;
	--modprobe)    [ "$modprobe" == "" ] && modprobe="$2" || modprobe="$modprobe|$2" ; shift 2 ;;
	--motd)        motd=$2       ; shift 2 ;;
	--mouse)       fmouse=1      ; shift 2 ;;  #switch value required but ignored for now
	--mount)       fdomount=1    ; shift 1 ;;
	--netman)      netman=$2     ; shift 2 ;;
	--nopassword)  fnopassword=1 ; shift 1 ;;
	--norestart|--noreboot) noreboot=1 ; shift 1 ;;
	--nouser) nouser=1 ; shift 1 ;;
	--nowait-timesync) nowaittimesync=1 ; shift 1 ;;
	--nowpa)       fnowpa=1      ; shift 1 ;;
	--nspawnsw)    nspawnsw=$2   ; shift 2 ;;
	--os)          os="${2,,}"   ; shift 2 ;;
	--password-pi) passwordpi=$2 ; shift 2 ;;
	--password-root) passwordroot=$2 ; shift 2 ;;
	--password-same) samepwd=$2  ; shift 2 ;;
	--password-user) passworduser=$2 ; shift 2 ;;
	--plugin-debug) plugindebug=1 ; shift 1 ;;
	--plugin|--plugins) [ "$plugins" == "" ] && plugins="$2" || plugins="${plugins}~$2" ; shift 2 ;;
	--poptions)    poptions="${2,,}" ; shift 2 ;;
	--ppart)       fppart=1      ; shift 1 ;;
	--redact)      redact=1      ; shift 1 ;;
	--rclocal)     [ "$rclocal" == "" ] && rclocal="$2" || rclocal="${rclocal}~$2" ; shift 2 ;;
	--reboot)      rebootwait=$2 ;
		       reboot=1      ; shift 2 ;;
	--redo-customize) redocustomize=1 ; shift 1 ;;
	--regen-ssh-host-keys) regensshkeys=1  ; shift 1 ;;
	--rename-pi)   renamepi=$2 ; frenamepi=1 ; shift 2 ;;
	--restart)     reboot=1      ; shift 1 ;;
	--rootpwd)     rootpwd=1     ; shift 1 ;;
	--sdmdir)      sdmdir=$2     ; shift 2 ;;
	--showapt)     showapt=1     ; shift 1 ;;
	--showpwd)     showpwd=1     ; shift 1 ;;
	--shrink)      fshrink=1     ; shift 1 ;;
	--ssh)         ssh="${2,,}"        ; shift 2 ;;
	--svc*disable) svcdisable=$2 ; shift 2 ;;
	--svc*enable)  svcenable=$2  ; shift 2 ;;
	--swap)        swapsize=$2   ; shift 2 ;;
	--sysctl)      [ "$sysctl" == "" ] && sysctl="$2" || sysctl="$sysctl|$2" ; shift 2 ;;
	--systemd-config) systemdconfig=$2 ; shift 2 ;;
	--timesyncd)   timesyncd=$2  ; shift 2 ;;
	--timezone)    timezone=$2   ; shift 2 ;;
	--udev)        [ "$udev" == "" ] && udev="$2" || udev="$udev|$2" ; shift 2 ;;
	--uid)         myuid=$2      ; shift 2 ;;
	--update-plugins) fupdateplugins=1 ; shift 1 ;;
	--user)        myuser=$2     ; shift 2 ;;
	--virt)        virtmode=$2   ; shift 2 ;;
	--vncbase)     vncbase="$2"  ; shift 2 ;;
	--wifi-country|--wificountry) wificountry=${2^^} ; shift 2 ;;
	--wpa)         wpaconf=$2    ; shift 2 ;;
	--xapps)       xapps="$2"    ; shift 2 ;;
	--xmb)         imgext=$2     ; shift 2 ;;
	--custom1)     custom1=$2    ; shift 2 ;;
	--custom2)     custom2=$2    ; shift 2 ;;
	--custom3)     custom3=$2    ; shift 2 ;;
	--custom4)     custom4=$2    ; shift 2 ;;
	--version)     pvers=1       ; shift 1 ;;
	--)            shift ; break ;;
	-h|--help)     printhelp ; shift ; exit ;;
	*) errexit "? $0: Internal error" ;;
    esac
done

dimg="$1"
#src=$(dirname $0)
[ $pvers -eq 1 ] && echo "sdm $version" && exit 0
#source $src/sdm-cparse           # Get function defs

#
# Adjust settings based on switches and check for conflicting switches
# and erroneous switch values
#

if [ "$cscript" != "" ]
then
    if [ ! -x "$cscript" ]
    then
	fn="$src/$(basename $cscript)"
	if [ -x "$fn" ]
	then
	    cscript=$fn
	fi
    fi
fi
#
# Handle --info switch right now. $dimg has the requested info item (timezones, locales, keymaps, wifi-countries)
#
if [ $infocmd -eq 1 ]
then
    case "${dimg,,}" in
	time*)
	    less /usr/share/zoneinfo/zone1970.tab ;;
	local*)
	    less /usr/share/i18n/SUPPORTED ;;
	key*)
	    less /usr/share/doc/keyboard-configuration/xorg.lst ;;
	wifi*)
	    less /usr/share/zoneinfo/iso3166.tab ;;
	help|*)
	    [ "${dimg,,}" != "help" ] && echo "? Unrecognized --info option '$dimg'" ;
	    echo $"
The --info command accepts one of four switch values:
timezone:     Show --timezone values
locale:       Show --locale values
keymap:       Show --keymap values
wifi-country: Show --wifi-country values

Keys can be abbreviated to 'time', 'local', 'key', and 'wifi'"
	    ;;
	*)
    esac
exit 0
fi
[ "${dimg,,}" == "help" ] && printhelp && exit
declare -a cmsgs                    # In case customization messages generated before we're ready to logtoboth them
cscript="$(fndotfullpath $cscript)"
[ $burn -eq 1 -a $burnfile -eq 1 ] && errexit "? Switch conflict: --burn and --burnfile"
[ $burn -eq 1 -o $burnfile -eq 1 ] && burning=1 || burning=0
[ $burning -eq 1 -a $fdomount -eq 1 ] && errexit "? Switch conflict: --burn|--burnfile and --mount"
[ $burning -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --burn|--burnfile and --explore"
[ $burning -eq 1 -a $fshrink -eq 1 ] && errexit "? Switch conflict: --burn|--burnfile and --shrink"
[ $fdomount -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --mount and --explore"
[ $fdomount -eq 1 -a $fshrink -eq 1 ] && errexit "? Switch conflict: --mount and --shrink"
[ $reboot -eq 1 -a $noreboot -eq 1 ] && errexit "? Switch conflict: --restart and --norestart"
[ $fcustomize -eq 1 -a $burning -eq 1 ] && errexit "? Switch conflict: --customize and --burn|--burnfile"
[ $fcustomize -eq 1 -a $fdomount -eq 1 ] && errexit "? Switch conflict: --customize and --mount"
[ $fcustomize -eq 1 -a $fexplore -eq 1 ] && errexit "? Switch conflict: --customize and --explore"
[ $fcustomize -eq 1 -a $fshrink -eq 1 ] && errexit "? Switch conflict: --customize and --shrink"
[ $burning -eq 1 -a $fdirtree -eq 1 ] && errexit "? Switch conflict: --directory and --burn|--burnfile"
[ $fexplore -eq 1 -a $fshrink -eq 1 ] && errexit "? Switch conflict: --explore and --shrink"
[ $expandroot -eq 1 -a $burn -eq 0 -a $burnfile -eq 0 ] && errexit "? Switch conflict: --expand-root only valid with --burn and --burnfile"
[ $fppart -eq 1 -a $(($burning+$fcustomize+$fexplore+$fdomount+$fshrink)) -ne 0 ] && errexit "? Switch conflict: --ppart and any of 'burn,burnfile,explore,mount,shrink'"
if [ "$aptmaint" != "" ]
then
    [ $(($burning+$fcustomize+$fexplore+$fdomount+$fshrink+$fppart)) -gt 0 ] && errexit "? One or more switches conflict with --aptmaint"
    aptfunction=1
fi
if [ $fcustomize -eq 1 ]
then
    if [ $frenamepi -eq 1 ]
    then
	[ "$myuser" != "" ] && errexit "? Only one of --rename-pi and --user can be used"
	myuser="$renamepi"
    fi
    [ $nouser -eq 0 -a "$myuser" == "" ] && write_premsg "% No username specified with the --user switch; Using 'pi'" && myuser="pi"
    [ $nouser -eq 1 ] && myuser=""
fi
#
# Ensure action requested: aptmaint, burn, customize, explore, mount, shrink, ppart 
#
if [ $(($aptfunction+$burning+$fcustomize+$fexplore+$fdomount+$fshrink+$fppart)) -eq 0 ]
then
    # Handle --extend only 
    [ $fextend -eq 0 ] && errexit "? No command specified (--aptmaint --burn, --customize, --explore, --mount)"
    fextendonly=1
fi
[ "$src" != "" -a ! -d "$src" ] && errexit "? sdm source directory '$src' not found"
[ "$csrc" != "" -a ! -d "$csrc" ] && errexit "? Custom source directory '$csrc' not found"
[ "$cscript" != "" -a ! -f "$cscript" ] && errexit "? Custom Phase Script '$cscript' not found"
[ "$cscript" != "" -a ! -x "$cscript" ]  && errexit "? Custom Phase Script '$cscript' not executable"
p1bootconf="$(fndotfullpath $p1bootconf)"
[ "$pi1bootconf" != "" -a ! -f "$pi1bootconf" ] && errexit "? Custom 1piboot.conf file '$pi1bootconf' not found"
if [ "$ssh" != "" ]
then
    [[ ! "|none|socket|service|" =~ "|$ssh|" ]] && errexit "? Unknown value '$ssh' for --ssh"
fi
[ "$ssh" == "" ] && ssh="service"
[ "$rebootwait" != "" ] && checknumeric "$rebootwait" "--reboot"
[ "$hdmigroup" != "" ] && checknumeric "$hdmigroup" "--hdmigroup"
[ "$hdmimode" != "" ] && checknumeric "$hdmimode" "--hdmimode"
[ "$myuid" != "" ] && checknumeric "$myuid" "--uid"
[ "$imgext" != "" ] && checknumeric "$imgext" "--xmb"
[ "$hdmimode" != "" -a "$hdmigroup" == "" ] && errexit "? --hdmimode set but not --hdmigroup"
[ "$hdmigroup" != "" -a "$hdmimode" == "" ] && errexit "? --hdmigroup set but not --hdmimode"
! cktimezone $timezone && errexit "? Unknown Timezone '$timezone'"
! ckwificountry $wificountry && errexit "? Unknown WiFi Country '$wificountry'"
! cklocale $locale && errexit "? Unknown Locale '$locale'"
! ckkeymap $keymap && errexit "? Unknown Keymap '$keymap'"

debugs=$(poptcheck "$debugs" "$vdebug" "--debug")
exitiferr "$debugs"
disables=$(poptcheck "$disables" "$vdisableopts" "--disable")
exitiferr "$disables"
poptions=$(poptcheck "$poptions" "$vpoptions" "--poption")
exitiferr "$poptions"
loadlocal=$(poptcheck "$loadlocal" "$vloadopts" "--loadlocal")
exitiferr "$loadlocal"
aptmaint=$(poptcheck "$aptmaint" "$vaptmaintops" "--aptmaint")
exitiferr "$aptmaint"
journal=$(poptcheck "$journal" "$vjournalopts" "--journal")
exitiferr "$journal"
#virtmode=$(poptcheck "$virtmode" "$vvirtopts" "--virt")
#exitiferr "$virtmode"
journal=${journal#|} ; journal=${journal%|}  #Strip off the vbars
os=$(poptcheck "$os" "$vosopts" "--os")
exitiferr "$os"
os=${os#|} ; os=${os%|}  #Strip off the vbars
[ "$os" == "raspbian" -o "$os" == "" ] && os="raspios"  #Allow old habits to never die ;)
[ "$os" != "raspios" ] && errexit "? Unsupported --os value: $os"
if [ "$plugins" != "" ]
then
    IFS="~" read -a plugs <<< $plugins
    for p in "${plugs[@]}"
    do
	p="${p%:*}"
	pf=0
	for d in  $(dirname $p) $src/local-plugins $src/plugins
	do
	    pn=$(basename $p)
	    if [ -f $d/$pn ]
	    then
		[ -x $d/$pn ] || errexit "? Plugin $d/$pn is not executable"
		# if plugin found outside of sdm hierarchy copy it in
		if [ "$d" == "$(dirname $p)" ]
		then
		    copyifnewer $d/$pn $src/local-plugins && write_premsg "% Copy Plugin '$pn' from '$d/$pn' to '$src/local-plugins'"
		fi
		pf=1
		break
	    fi
	done
	[ $pf -eq 0 ] && errexit "? Unrecognized plugin '$p'"
    done
fi
#
# --systemd-config
#
if [ "$systemdconfig" != "" ]
then
    emsg=""
    IFS="," read -a itemlist <<< "$systemdconfig"
    for o in "${itemlist[@]}"
    do
	IFS=":" read olname fname <<< "$o"
	lname=${olname,,} ; lname=${lname%d}    #Copy name and strip trailing 'd' if present (easy typo)
	case "$lname" in
	    login|network|resolve|system|timesync|user)
		if [ -f $fname ]
		then
		    nsdfn="sdfn${lname}"
		    printf -v "$nsdfn" "%s" "$fname"   #Update variable named sdfn${lname}
		else
		    [ "$emsg" != "" ] && emsg="$emsg,${olname}:${fname}" || emsg="${olname}:${fname}"
		fi
		;;
	    *)
		[ "$emsg" != "" ] && emsg="$emsg,${olname}:is-unknown" || emsg="${olname}:is-unknown"
		;;
	esac
    done
    [ "$emsg" != "" ] && errexit "? --systemd-config file(s) not found: $emsg"
fi
#
# --netman
#
if [ "$netman" != "" ]
then
    if ! [[ "|nm|dhcpcd|network-manager|" =~ "|$netman|" ]]
    then
	errexit "? Unknown --netman value: $netman"
    fi
fi
#
# Password-related switches
#
if [ "$samepwd" != "" ]
then
    case "${samepwd,,}" in
	y*)
	    passwordsame=1
	    ;;
	n*)
	    passwordsame=-1
	    ;;
	*) errexit "? Unrecognized value '$samepwd' for --password-same switch"
    esac
fi
#
# Process --lxde-config switch
#
if [ "$lxdeconfig" != "" ]
then
    IFS="," read -a citems <<< "$lxdeconfig"
    for c in "${citems[@]}"
    do
        IFS=":=" read key value <<< "$c"
	case "${key,,}" in
	    libfm|pcmanfm|lxterminal)
		cf="${key}conf"
		[ ! -f $value ] && errexit "? --lxde-config $cf config file '$value' not found"
		export $cf=$value #Copies the filename into one of libfmconf|pcmanfmconf|lxterminalconf
		;;
	    *) errexit "? Unknown --lxde-config key '$key'" ;;
	esac
    done
fi
#
# Check values for --bootset
#
if [ "$bootsetpairs" != "" ]
then
    IFS="," read -a citems <<< "$bootsetpairs"
    for c in "${citems[@]}"
    do
	IFS=":=" read key value <<< "$c"
	! [[ "$vbootset" =~ "|$key|" ]] && errexit "? Unrecognized --bootset key '$key'"
    done
fi
#
# Set dtoverlay if gadget mode requested
#
if [ $fgadgetmode -eq 1 ]
then
    [ "$dtoverlay" == "" ] && dtoverlay="dwc2" || dtoverlay="$dtoverlay|dwc2"
fi
[ $fextend -eq 1 -a "$(which parted)" == "" ] && errexit "? Please 'sudo apt install parted'"
#
# Check sanity of the disk image argument
#
dimgdevname="IMG"
[ "$dimg" == "" ] && errexit "? No disk image specified"
dimgdev=0
if [ $fdirtree -eq 1 ]
then
    [ ! -d $dimg ] && errexit "? Cannot find directory '$dimg'"
    dimgdevname="Directory"
elif [ ! -f "$dimg" ]
then
    [ ! -b $dimg ] && errexit "? Disk image file or device '$dimg' does not exist"
    dimgdev=1
    dimgdevname="Device"
fi    
if [ $dimgdev -eq 0 -a -f "$dimg" ]
then
    for fext in xz XZ zip ZIP
    do
	if [ "${dimg%%.$fext}" != "$dimg" ]
	then
	    errexit "? File '$dimg' appears to be a ${fext^^} file\n  un${fext,,} it to operate on the IMG contained within it"
	fi
    done
elif [ $fextend -eq 1 ]
then
    echo "% Ignoring --extend for non-file-based $dimgdevname '$dimg'" && fextend=0
fi
#
# Ensure wpa is correctly configured for the request, if needed
#
[ "$wpaconf" != "" -a ! -f "$wpaconf" ] && errexit "? wpa_supplicant config file '$wpaconf' not found"
[ $fcustomize -eq 1 -a "$wpaconf" == "" -a $fnowpa -ne 1 ] && errexit "? Use --nowpa for no automatic wpa processing or --wpa to specify your wpa_supplicant.conf"

if [ "$eeprom" != "" ]
then
    if [[ ! "|critical|stable|beta|" =~ "|$eeprom|" ]]
    then
	echo "% --eeprom value '$eeprom' is not one of the standard 'critical/stable/beta'. Continuing..."
    fi
fi    

[ "$dhcpcd" != ""  -a ! -f "$dhcpcd" ]  && errexit "? --dhcpcd file '$dhcpcd' not found"
[ "$exports" != "" -a ! -f "$exports" ] && errexit "? --exports file '$exports' not found"

for c in d hourly daily weekly monthly
do
    ct="cron$c"
    cf=${!ct}     #  (eval "cf=\$$ct" alternate way)
    [ "$cf" != "" ] && checkfilelist "$cf" "--cron-$c"
done

[ "$sysctl" != ""  ] && checkfilelist "$sysctl" "--sysctl"
[ "$modprobe" != "" ] && checkfilelist "$modprobe" "--modprobe"
[ "$motd" != "" -a "$motd" != "/dev/null" ] && checkfilelist "$motd" "--motd"
[ "$udev" != "" ] && checkfilelist "$udev" "--udev"
if [ "$hotspot" != "" ]
then
    [ ! -f $hotspot ] && errexit "? --hotspot file '$hotspot' not found"
    reboot=1
fi
if [ "$b0script" != "" ]
then
    [ ! -f $b0script ] && errexit "? --b0script file '$b0script' not found"
fi
if [ "$b1script" != "" ]
then
    [ ! -f $b1script ] && errexit "? --b1script file '$b1script' not found"
fi
#
# parse and set ecolors
#
[ "$ecolors" == "" ] && ecolors="blue:gray:red"
IFS=":" read efg ebg ecursor <<< $ecolors
[ "$efg" == "" ] && efg="blue"
[ "$ebg" == "" ] && ebg="gray"
[ "$ecursor" == "" ] && ecursor="red"
ecolors="$efg:$ebg:$ecursor"
#
# Process --apps and --xapps switches
#
appfile=$(findappfile "$apps") #Gets real @file nam or list of apps into '$appfile'
exitiferr "$appfile"
apps=$(getapplist "$appfile")    #Gets definitive app list into '$apps'
xappfile=$(findappfile "$xapps") #Ditto for xappfile and xapps
exitiferr "$xappfile"
xapps=$(getapplist "$xappfile")
#
# Process the command. Actions are burn, custommize, mount, and standalone --extend
#
trap "doexit" EXIT
thishost="$(hostname)"
#
# Process --burn command
#
if [ $burning -eq 1 ]
then
    if iswsl
    then
	 [ $burnfile -eq 0 ] && errexit "? sdm burn not supported on Windows WSL"
    fi
    source $src/sdm-cmdsubs
    sdm_burndevfile
    [ $burn -eq 1 ] && echo "* Storage '$burndev' is ready" || echo "* Storage Image '$burnfilefile' is ready"
    exit 0
fi
#
# Process --shrink command
#
if [ $fshrink -eq 1 ]
then
    declare -x SDMPT=$(makemtpt)
    source $src/sdm-cmdsubs
    sdm_shrink
    exit 0
fi
if [ $fppart -eq 1 ]
then
    source $src/sdm-cmdsubs
    sdm_ppart
    exit 0
fi
#
# Process --mount command
#
if [ $fdomount -eq 1 ]
then
    declare -x SDMPT=$(makemtpt)
    domount "$dimg"
    echo "* $dimgdevname '$dimg' mounted on $SDMPT"
    if [ -t 0 ]
    then
	echo $"** BE VERY CAREFUL!! **
** Precede all path references by '$SDMPT' or you WILL modify your running system **
** Use 'exit' to Exit the bash shell and unmount the $dimgdevname"
	IFS=":" read mfg mbg mcursor <<< $mcolors
	[ "$mfg" == "" ] && mfg="black"
	[ "$mbg" == "" ] && mbg="LightSalmon1"
	[ "$mcursor" == "" ] && mcursor="blue"
	stermcolors "$mfg" "$mbg" "$mcursor" xt
    fi
    cd $SDMPT
    bash
    cd - > /dev/null
    [ -t 0 ] && resetcolors xt
    exit 0
fi
#
# Extend the image if --extend
#
if [ $fextendonly -eq 1 ]
then
    if [ $fextend -eq 1 ] # Only on if file-based (e.g., can be extended)
    then
	extendandresize
    fi
    exit 0
fi
#
# IMG architecture not detected before this point so don't yet know if chroot
#
# Not --extend (only). Other steps need IMG mounted
declare -x SDMPT=$(makemtpt)
domount "$dimg"
initvirt write_premsg
#
# Handle commands --aptmaint, --customize, and --explore
#
sdmdone="$SDMPT/etc/sdm/custom.ized"
icolors=0    # Don't set colors around systemd-nspawn
if [ $fcustomize -eq 0 ]
then
    if [ "$aptmaint" != "" ]
    then
	fbatch=1
	spawncmd="$sdmdir/sdm-phase1 apt $aptmaint"
	if [ ! -f $SDMPT/$sdmdir/sdm-phase1 ]
	then
	    echo "? sdm has not customized $dimgdevname '$dimg'"
	    exit 1
	fi
    else
	#
	# Doing --explore
	#
	echo "* Enter $dimgdevname '$dimg'"
	spawncmd=""
	icolors=1
    fi
else
    #
    # Doing a customization
    # Create and populate $sdmdir and /etc/sdm in the IMG
    #
    if [ -f $sdmdone -a $redocustomize -eq 0 ]
    then
	if ! askyn "** $dimgdevname '$dimg' has already been customized. Redo?" "-n 1"
	then
	    echo ""
	    echo "** Explore the image with '$0 --explore $dimg'"
	    exit 0
	else
	    echo ""
	fi
    fi
    #
    # Extend image if requested
    #
    if [ $fextend -eq 1 ]
    then
	echo "* Unmount $dimgdevname for --extend"
	savesdmpt=$SDMPT
	docleanup keep
	extendandresize   # Remounts IMG afterward
    fi
    pi1bootconf="$(fndotfullpath $pi1bootconf)"
    spawncmd="$sdmdir/sdm-phase1"
    #
    # Create and populate $sdmdir tree
    #
    [ ! -d $SDMPT/etc/sdm ] && mkdir -p $SDMPT/etc/sdm/assets $SDMPT/etc/sdm/0piboot $SDMPT/etc/sdm/local-assets
    touch $SDMPT/etc/sdm/history
    chmod 700 $SDMPT/etc/sdm
    echo "# sdm added these settings from the command line (see /etc/sdm/history)" > $SDMPT/etc/sdm/auto-1piboot.conf
    mkdir -p $SDMPT/$sdmdir/1piboot
    for f in sdm sdm-phase0 sdm-phase1 sdm-cparse sdm-readparams sdm-cmdsubs sdm-firstboot sdm-apt sdm-apt-cacher sdm-hotspot sdm-cportal sdm-logmsg sdm-gburn
    do
	cp $src/$f $SDMPT/$sdmdir
    done
    rm -f $SDMPT/usr/local/bin/sdm
    ln -s $sdmdir/sdm $SDMPT/usr/local/bin
    mkdir -p $SDMPT/$sdmdir/{plugins,local-plugins}
    cp $src/plugins/* $SDMPT/$sdmdir/plugins
    [ "$(ls $src/local-plugins 2>/dev/null)" != "" ] && cp $src/local-plugins/* $SDMPT/$sdmdir/local-plugins
    # Always set this in case system with non-std location does sdm and sets it to /usr/local/sdm
    sed -i "s#SDMDIR=\".*\"#SDMDIR=\"$sdmdir\"#" $SDMPT/$sdmdir/sdm-gburn
    cp $src/sdm-readparams $SDMPT/etc/sdm
    chmod 755 $SDMPT/$sdmdir/*
    [ "${appfile:0:1}" == "@" ]  && cp -f ${appfile:1:999}  $SDMPT/$sdmdir
    [ "${xappfile:0:1}" == "@" ] && cp -f ${xappfile:1:999} $SDMPT/$sdmdir
    logtoboth "* Start Configuration"                         # Make possible triggerhappy/journal messages more visible
    if compgen -G "$src/1piboot/*.sh" > /dev/null
    then
	cp -f $src/1piboot/*.sh $SDMPT/$sdmdir/1piboot
	if [ $bootscripts -eq 1 ]
	then
	    [ -f $SDMPT/$sdmdir/1piboot/010-disable-triggerhappy.sh ] && logtoboth "!!sdm now supports '--disable triggerhappy'; suggest removing $sdmdir/1piboot/010-disable-triggerhappy.sh"
	    [ -f $SDMPT/$sdmdir/1piboot/030-disable-rsyslog.sh ] && logtoboth "!!sdm now supports --journal; suggest removing $sdmdir/1piboot/030-disable-rsyslog.sh"
	fi
	chmod 755 $SDMPT/$sdmdir/1piboot/*.sh
    fi
    raspiosver=$(grep VERSION_ID $SDMPT/etc/os-release | (IFS="=" read v id ; id=${id%\"} ; echo ${id#\"}))
    logtoboth "> Command Line: $cmdline"
    logtoboth "> IMG RasPiOS Version: $raspiosver"
    logtoboth "> IMG date: $(grep -s -m1 -o '[[:digit:]]\{4\}-[[:digit:]]\{2\}-[[:digit:]]\{2\}' $SDMPT/etc/rpi-issue)"

    # Flush accumulated messages
    if [ ${#cmsgs[@]} -gt 0 ]
    then
        for (( i=0 ; i < ${#cmsgs[@]} ; i++ ))
        do
            logtoboth "${cmsgs[$i]}"
        done
    fi

    logfreespace
    logtoboth "> Copy sdm to $sdmdir in the $dimgdevname"   # Yes, already done above ;)
    if [ $loadl10n -eq 1 ]
    then
	readl10n
	logtoboth "> Load Localization (L10N) settings from running system"
	logtoboth "> * Keymap:       $keymap"
	logtoboth "> * Locale:       $locale"
	logtoboth "> * Timezone:     $timezone"
	logtoboth "> * WiFi Country: $wificountry"
    fi
    if [ "$pi1bootconf" != "" ]
    then
	logtoboth "> Copy Custom 1piboot.conf '$pi1bootconf' to the $dimgdevname"
	cp $pi1bootconf $SDMPT/etc/sdm/1piboot.conf
	cp $pi1bootconf $SDMPT/$sdmdir/1piboot                                         #Drop a copy in $sdmdir in the IMG
    else
	if [ -d $src/1piboot -a -f $src/1piboot/1piboot.conf ]
	then
	    cp $src/1piboot/1piboot.conf $SDMPT/etc/sdm/
	    cp $src/1piboot/1piboot.conf $SDMPT/$sdmdir/1piboot
	fi
    fi
    [ -f $SDMPT/etc/sdm/1piboot.conf ] && chmod 644 $SDMPT/etc/sdm/1piboot.conf
    if [ "$cscript" != "" ]
    then
	logtoboth "> Copy Custom Phase Script '$cscript' to $sdmdir in the $dimgdevname"
	cp $cscript $SDMPT/$sdmdir
    fi
    chmod 755 $SDMPT/$sdmdir/*
    # If --apps and/or --xapps are files copy them also. If not, clear the variables for writeconfig
    [ "${appfile:0:1}" == "@" ]  && cp ${appfile:1:999}  $SDMPT/$sdmdir || appfile=""
    [ "${xappfile:0:1}" == "@" ] && cp ${xappfile:1:999} $SDMPT/$sdmdir || xappfile=""
    #
    # Write the config settings into the IMG
    #
    writeconfig
    #
    # Perform Phase 0 on the image
    #
    $SDMPT/$sdmdir/sdm-phase0
    touch $sdmdone
    
    echo "* Enter image '$dimg' for Phase 1"
fi


[ $icolors -eq 1 -a -t 0 -a "$spawncmd" == "" ] || icolors=0
[ $icolors -eq 1 ] && stermcolors "$efg" "$ebg" "$ecursor" xt
sdm_spawn "$spawncmd" "$nspawnsw"
[ $icolors -eq 1 ] && resetcolors xt

exit 0
