#!/bin/bash
#
# This is an sdm plugin for: speedtest
#
# The plugin is called three times: for Phase 0, Phase 1, and post-install.
#
#
# Add crontime=' ' which schedules via cron
# If no crontime, then service sleeps and runs every interval seconds
#
function loadparams() {
    source $SDMPT/etc/sdm/sdm-readparams
}

# $1 is the phase: "0", "1", or "post-install"
# $2 is the argument list: arg1=val1|arg2=val2|arg3=val3| ...
#
# Main code for the Plugin
#
phase=$1
pfx="$(basename $0)"     #For messages
args="$2"
loadparams
vldargs="|alertping|alertdown|alertup|alertscript|interval|log|rawlog|serverid|"     # "|list|of|valid|args|"
rqdargs="log"                                               # |list|of|required|args|or|nullstring|
assetdir="$SDMPT/etc/sdm/assets/$pfx"

if [ "$phase" == "0" ]
then
    #
    # In Phase 0 all references to directories in the image must be preceded by $SDMPT
    #
    logtoboth "* Plugin $pfx: Start Phase 0"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs" || exit
    plugin_printkeys
    if [[ "$alertscript" != "" ]]
    then
	[ -x $alertscript ]    ||  logtobothex "? Plugin $pfx: Alert script '$alertscript' not found or not executable"
	[ "$alertping" == "" ] &&  logtobothex "? Plugin $pfx: Argument 'alertping' missing for alerting"
	[ "$alertdown" == "" ] && logtobothex "? Plugin $pfx: Argument 'alertdown' missing for alerting"
	[ "$alertup" == "" ] && logtobothex "? Plugin $pfx: Argument 'alertup' missing for alerting"
    fi
    mkdir -p $assetdir
    if [ "$alertscript" != "" ]
    then
	logtoboth "> Plugin $pfx: Copy alertscript '$alertscript' to $assetdir"
	cp $alertscript $assetdir
    fi
    logtoboth "* Plugin $pfx: Complete Phase 0"
elif [ "$phase" == "1" ]
then
    #
    # Phase 1 (in nspawn)
    #
    logtoboth "* Plugin $pfx: Start Phase 1"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase 1"
    logtoboth "> Plugin $pfx: Install speedtest-cli and gawk"
    installpkgsif "speedtest-cli gawk"
    if [ "$alertscript" != "" ]
    then
	asb=$(basename $alertscript)
	logtoboth "> Plugin $pfx: Copy alertscript from $assetdir to /usr/local/bin"
	cp $assetdir/$asb /usr/local/bin
    fi
    [ "$alertping" == "" ] && alertping=10
    [ "$alertdown" == "" ] && alertdown=10
    [ "$alertup" == "" ] && alertup=10
    [ "$interval" == "" ] && interval=3600
    [ "$log" == "" ] && log="/var/log/sdm-speedtest-monitor.log"
    [ "$log" == "none" ] && log=""
    logtoboth "> Create /etc/default/sdm-speedtest-monitor configuration"
    cat >| /etc/default/sdm-speedtest-monitor <<EOF
# sdm-speedtest-monitor settings
# Alert if ping greater than alertping
alertping=$alertping
# Alert if download speed less than alertdown
alertdown=$alertdown
# Alert if upload speed less than alertup
alertup=$alertup
# Interval between speed tests
alertinterval=$interval
# Write service log to this file
splog=$log
# /path/to/alertscript
alertscript=/usr/local/bin/$asb
# Specific server ID to use or ""
# Sometimes selected server may not be available
spserverid=$serverid
# Write raw returned output data to this file
sprawlog=$rawlog
EOF
    logtoboth "> Create /usr/local/bin/sdm-speedtest-monitor script"
    cat >| /usr/local/bin/sdm-speedtest-monitor <<EOF
#!/bin/bash
#
# Run speedtest every \$1 interval
#
# Inputs:
# \$1: Interval in seconds between speedtests
# \$2: Data log file /path/to/logfile
# \$3: alertping in ms max ping (required if alertscript)
# \$4: alertdl in bytes min dl speed (required if alertscript)
# \$5: alertup in bytes min ul speed (required if alertscript)
# \$6: alertscript (optional)
# \$7: /path/to/raw-speedtest-output (optional)
# \$8: speedtest server ID (optional)
#

function thisdate() {
    local datefmt="%Y-%m-%d:%H:%M:%S"
    echo  "\$(date +"\$datefmt")"
}

function run_speedtest() {
    local serverid="\$1" logfile="\$2" rawlog="\$3" line svr
    local ping download upload junk sts
    local rid rsponsor rserver rts rdistance rping rdownload rupload rshare rip

    [ "\$serverid" == "" ] && svr="" || svr="--server \$serverid"
    read line < <(speedtest --csv \$svr)
    sts=\$?
    if [ \$sts -eq 0 ]
    then
	[ "\$rawlog" != "" ] && echo "\$(thisdate) \$line" >> \$rawlog
	IFS="|" read rid rsponsor rserver rts rdistance rping rdownload rupload junk <<< \$(gawk -v FPAT='([^,]+)|(\"[^\"]+\")' -v OFS="|" '{print \$1, \$2, \$3, \$4, \$5, \$6, \$7, \$8, \$9, \$10}' <<< \$line)
	# round rping and strip ".nnnn" on all
	rping=\$(python -c "print(round(\$rping))")
	rdownload=\${rdownload%%.*}
	rupload=\${rupload%%.*}
	echo "\$rping \$rdownload \$rupload \$rid \$rsponsor \$rserver \$rdistance"
    else
	echo "speedtest returned error '\$sts'"
    fi
}

function speedtester() {
    local interval="\$1" logfile="\$2" alertping="\$3" alertdl="\$4" alertup="\$5" alertscript="\$6" rawlog="\$7" serverid="\$8"
    local line ping download upload junk

    while [ true ]
    do
	line=\$(run_speedtest "\$serverid" "\$logfile" "\$rawlog")
	if ! [[ \$line =~ "speedtest returned error" ]] && [[ "\$line" != "" ]]
	then
	    echo "\$(thisdate) \$line" >> \$logfile
	   if [[ "\$alertscript" != "" ]] && [[ -x \$alertscript ]]
	   then
	       IFS=" " read ping download upload junk <<< \$line
	       #echo "\$ping \$download \$upload"
	       # Alert if:
	       #   ping > alertping
	       #   download < alertdl
	       #   upload < alertup
	       if [[ \$ping -gt \$alertping ]] || [[ \$download -lt \$alertdl ]] || [[ \$upload -lt \$alertup ]]
	       then
		   logger "speedtest-monitor: Call alert script '\$alertscript': alert \$ping \$download \$upload"
		   \$alertscript alert \$ping \$download \$upload
	       fi
	   fi
	else
	   if [[ "\$alertscript" != "" ]] && [[ -x \$alertscript ]]
	   then
	       [ "line" == "" ] && line="speedtest returned error $sts"
	       echo "\$(thisdate) ? \$line" >> \$logfile
	       logger "speedtest-monitor: Call alert script '\$alertscript': error '\$line'"
	       \$alertscript error "\$line"
	   fi
	    
	fi
	sleep \$interval
    done
}

function wheader() {
    # \$1: string
    local str="\$1"
    [ "\$logf" == "" ] || echo "\$str" >> \$logf
    [ "\$rawf" == "" ] || echo "\$str" >> \$rawf
}

logf="\$2"
rawf="\$7"
if [[ "\$logf" != "" ]] || [[ "\$rawf" != "" ]]
then
    wheader ""
    wheader " > sdm-speedtest start \$(date +"%Y-%m-%d:%H:%M:%S")"
    wheader "   interval:    \$1"
    wheader "   log:         \$2"
    wheader "   alertping:   \$3"
    wheader "   alertdown:   \$4"
    wheader "   alertup:     \$5"
    wheader "   alertscript: \$6"
    [ "\$rawf" != "" ] && wheader "   rawlog:      \$rawf"
    [ "\$serverid" != "" ] && wheader "   serverid:    \$serverid"
    wheader ""
    [ "\$rawf" != "" ] && echo "#ServerID,Sponsor,ServerName,Timestamp,Distance,Ping,Download,Upload,Share,IPAddress" >> \$rawf
fi

speedtester "\$1" "\$2" "\$3" "\$4" "\$5" "\$6" "\$7" "\$8"

exit 0
EOF
    chmod 755 /usr/local/bin/sdm-speedtest-monitor
    cat >| /etc/systemd/system/sdm-speedtest-monitor.service <<EOF
[Unit]
Description=sdm Speedtest monitor
After=network-online.target

[Service]
Type=simple
EnvironmentFile=/etc/default/sdm-speedtest
#                                      ###     in seconds   /f/p/log  max ping    min down     min up      /f/p/script   server id or "" /f/p/rawlog
ExecStart=/usr/local/bin/sdm-speedtest-monitor "\$alertinterval" "\$splog" "\$alertping" "\$alertdown" "\$alertup" "\$alertscript"  "\$sprawlog" "\$spserverid"
Restart=on-failure
RestartSec=60s

[Install]
WantedBy=multi-user.target
EOF
    #logfreespace "at end of $pfx Phase 1"
    cat >| /etc/sdm/0piboot/090-enable-speedtest.sh <<EOF
#!/bin/bash
source /etc/sdm/sdm-readparams
bootlog "Enable sdm-speedtest-monitor"
systemctl enable sdm-speedtest-monitor
EOF
    logtoboth "* Plugin $pfx: Complete Phase 1"
elif [ "$phase" == "post-install" ]
then
    #
    # Plugin Post-install edits
    #
    logtoboth "* Plugin $pfx: Start Phase post-install"
    plugin_getargs $pfx "$args" "$vldargs" "$rqdargs"
    #logfreespace "at start of Plugin $pfx Phase post-install"

    #logfreespace "at end of $pfx Custom Phase post-install"
    logtoboth "* Plugin $pfx: Complete Phase post-install"
fi
