#!/bin/bash
# This script runs in the nspawn image
#

function doinstalls() {
    #
    # $1 - app list
    # $2 - subject string (e.g., "XWindows Installs" or "Application Installs")
    #
    if [ "$1" != "" ]
    then
	logtoboth "* Start $2"
	logtoboth "> ${2}: $1"
	if [[ "$debugs" =~ "apt" ]]
	then
	    logtoboth "> Install apt packages singly per '--debug apt'"
	    IFS=" " read -a alist <<< "$1"
	    for a in "${alist[@]}"
	    do
		logtoboth "> -- $a"
		doaptrpterror "install --no-install-recommends --yes $a" $showapt
	    done
	else
	    doaptrpterror "install --no-install-recommends --yes $1" $showapt
	fi
	logtoboth "* $2 Completed"
    else
	logtoboth "> Skip $2 per empty package list"
    fi
}

function upgkeepconf() {
    #
    # Write /etc/apt/apt.conf.d/02sdm-myconf
    # Forcing apt to not query about conf file changes
    # $1 = "--yes" or ""
    # $2 = $showapt or 0 to not display output
    # $3 = 0 [upgrade] or 1 [dist-upgrade]
    #
cat > /etc/apt/apt.conf.d/02sdm-myconf <<EOF
    Dpkg::Options {
   "--force-confdef";
   "--force-confold";
}
EOF
[ "$3" == "0" ] && upg="upgrade" || upg="dist-upgrade"
doapt "$1 $upg" "$2" || logapterror
rm -f /etc/apt/apt.conf.d/02sdm-myconf
}

function delaydmenable {
    #
    # Disable the display manager in $1 and set for re-enable during First Boot
    # $2=delayed target (either B3 or B4)
    #
    local dm="$1" bbh="$(getfinalbbh $2)"
    logtoboth "% Display Manager '$dm' will be disabled when the system first boots"
    logtoboth "  The sdm FirstBoot process will re-enable it with boot_behavior '$bbh'"
    #SUDO_USER="$userx" raspi-config do_boot_behaviour B1 nonint > /dev/null 2>&1
    do_raspiconfig do_boot_behaviour B1
    systemctl set-default multi-user.target > /dev/null 2>&1
    echo "delayed_boot_behavior=$bbh" >> /etc/sdm/auto-1piboot.conf
    #if (! grep '^boot_behav' /etc/sdm/auto-1piboot.conf > /dev/null 2>&1)
    #then
	#echo "delayed_boot_behavior=$bbh" >> /etc/sdm/auto-1piboot.conf
    #fi
    return
}

function dodt() {
    #
    # $1 = name (either "dtoverlay" or "dtparam"
    # $2 = value(s)
    #
    local dtname="$1" dtvalues="$2" citems=() c
    if [ "$dtvalues" != "" ]
    then
	logtoboth "> Add new $dtname settings to /boot/config.txt"
	echo "" >> /boot/config.txt
	echo "# $dtname items added by sdm --$dtname" >> /boot/config.txt
	IFS="|" read -a citems <<< "$dtvalues"
	for c in "${citems[@]}"
	do
	    logtoboth ">  $dtname $c"
	    echo "$dtname=$c" >> /boot/config.txt
	done
    fi
}

function deferqemu() {
    #
    # Set deferred install
    #
    logtoboth "% chroot/qemu-user-static; Defer install of qemu-user-static to system FirstBoot"
    fnqemu="/etc/sdm/0piboot/010-install-qemu.sh"
    if [ ! -f $fnqemu ]
    then
	cat > $fnqemu <<EOF
#!/bin/bash
#
# Install qemu-user-static. Install deferred because it can't be installed in a chroot
#
source /etc/sdm/sdm-readparams
logger "FirstBoot install qemu-user-static"
doapt "install --yes --no-install-recommends qemu-user-static" $showapt
EOF
	chmod 755 $fnqemu
    fi
}

function doctrlcp1() {
    echo "% Caught CTRL/C. Exiting Phase 1..."
    exit 1     #Can't use poweroff since no job control in either nspawn or chroot
}
#
# Read configuration information from sdm
#
declare -x SDMNSPAWN="Phase1"
source /etc/sdm/sdm-readparams

#
# If --apt just do those and exit
#
cmd="$1"
cmdoptions="$2"
# case stmt falls through if not processed within
trap "doctrlcp1" SIGINT
case "$cmd" in
    apt)
	logtoboth "* Start apt maintenance"
	logfreespace "at start of 'apt $cmdoptions'"
	[[ "$cmdoptions" =~ "update" ]] &&  logtoboth "> Perform 'apt update'" && (doapt "--yes update"  0 || logapterror)
	[[ "$cmdoptions" =~ "upgrade" ]] && logtoboth "> Perform 'apt $upg'" && upgkeepconf --yes 0 $aptdistupgrade
	[[ "$cmdoptions" =~ "autoremove" ]] && logtoboth "> Perform 'apt autoremove'" && (doapt "--yes autoremove" 0 || logapterror)
	cklogfreespace "at end of 'apt $cmdoptions'"
	logtoboth "* apt maintenance Completed"
	exit 0
	;;
    b1script)   # Burn time run script 
	fn="/etc/sdm/assets/$(basename $cmdoptions)"
	if [ -f $fn ]
	then
	    logtoboth "> Run script '$cmdoptions' [$fn] in nspawn"
	    /etc/sdm/assets/$(basename $cmdoptions)
	else
	    logtoboth "? Internal error: Script '$fn' not found"
	fi
	exit 0
	;;
    do-disables)
	[ "$disables" != "" ] && do_disables "$disables"
	exit 0
	;;
    burn-enable-lightdm-autologin)  # Delay lightdm enable until sdm-firstboot
	setlightdmautologin burning
	exit 0
	;;
    burn-enable-lightdm-delay)  # Delay lightdm enable until sdm-firstboot
	delaylightdmenable burning
	exit 0
	;;
    run-all-plugins)  # Run Plugin phase 1 or post-install
	phase="$2"
	runplugins $phase
	exit 0
        ;;
    run-one-plugin)  # Run Plugin phase 1 or post-install
	# $2: plugin name and args $3: Phase
	p="$2"
	phase=$3
	runonepluginx "$p" $phase
	exit 0
        ;;
esac
logtoboth "* Start Phase 1 image customization"
logfreespace "at start of Phase 1 image customization"

logtoboth "*+Phase 1 sdm configuration"
#
# Set up sdm-firstboot service. This service processes some settings that can only be done
# on the first boot of the system.
#
logtoboth "> Configure and enable sdm FirstBoot service (sdm-firstboot)"
[ -f /etc/systemd/system/sdm-firstboot.service ] && rm -f /etc/systemd/system/sdm-firstboot.service
cat > /etc/systemd/system/sdm-firstboot.service <<EOF
[Unit]
Description=sdm System FirstBoot Configuration
After=network.target
#Before=rc-local.service

[Service]
Type=forking
ExecStart=$sdmdir/sdm-firstboot
TimeoutSec=0
RemainAfterExit=yes
GuessMainPID=no

[Install]
WantedBy=multi-user.target
EOF

systemctl enable sdm-firstboot > /dev/null 2>&1

logtoboth "*+Phase 1 Network/WiFi/Bluetooth configuration"
#
# Set to disable bluetooth and/or wifi if requested
#
[[ "$disables" =~ "bluetooth" ]] && do_disables bluetooth
[[ "$disables" =~ "wifi" ]] && do_disables wifi
#
# Set dhcpcd wait if requested
#
if [ "$dhcpcdwait" == "1" ]
then
    mkdir -p /etc/systemd/system/dhcpcd.service.d/
    # use the same /path/to/dhcpcd that the dhcpcd service is
    dex=$(grep -E "ExecStart=.*/dhcpcd" /lib/systemd/system/dhcpcd.service| head -n 1 -)
    dhcf=${dex##ExecStart=}  #Strip leading ExecStart=
    dhcf=${dhcf%% *}         #Strip everything after the path (switches,etc)
    logtoboth "> Enable dhcpcd [$dhcf] 'wait for network connection'"
    cat > /etc/systemd/system/dhcpcd.service.d/wait.conf << EOF
[Service]
ExecStart=
ExecStart=$dhcf -q -w
EOF
fi
#
# Set up ssh as requested
#
if [ "$ssh" == "service" ]
then
    logtoboth "> Enable SSH service via /boot/ssh"
    touch /boot/ssh
elif [ "$ssh" == "socket" ]
then
    logtoboth "> Enable SSH via ssh.socket per --ssh socket"
    systemctl enable ssh.socket > /dev/null 2>&1
    systemctl disable sshswitch.service > /dev/null 2>&1
elif [ "$ssh" == "none" ]
then
    logtoboth "> Disable SSH per --ssh none"
    systemctl disable ssh.service > /dev/null 2>&1
fi
if [ $fgadgetmode -eq 1 ]
then
    # dtoverlay=dwc2 set in sdm if gadget-mode
    # ssh enabled by default. We don't check if user has disabled.
    logtoboth "> Enable Gadget Mode"
    sed -i "s/rootwait/rootwait modules-load=dwc2,g_ether/" /boot/cmdline.txt
fi

logtoboth "*+Phase 1 User configuration"
#
# Handle --rename-user
#
if [ $frenamepi -eq 1 ]
then
    # Replicate functionality in /lib/userconf-pi/userconf
    firstuser="$(getent passwd 1000 | (IFS=":" read un rest ; echo $un))"
    firstgroup="$(getent group 1000 | (IFS=":" read gn rest ; echo $gn))"
    logtoboth "> Rename user '$firstuser' to '$myuser'"
    if grep -q ^pi: /etc/passwd
    then
	if ! grep -q ^$myuser: /etc/passwd
	then
	    usermod --login $myuser $firstuser
	    usermod --move-home --home /home/$myuser $myuser
	    groupmod --new-name $myuser $firstgroup
	    for file in /etc/subuid /etc/subgid
	    do
		sed -i "s/^$firstuser:/$myuser:/" $file
	    done
	    sudofile="010_$firstuser-nopasswd"
	    if [ -f /etc/sudoers.d/$sudofile ]
	    then
		chmod 755 /etc/sudoers.d/$sudofile
		sed -i "s/^$firstuser /$myuser /" /etc/sudoers.d/$sudofile
		chmod 440 /etc/sudoers.d/$sudofile
		mv /etc/sudoers.d/$sudofile /etc/sudoers.d/${sudofile/$firstuser/$myuser}
	    fi
	else
	    logtoboth "% Skip --rename-pi; User '$myuser' already exists"
	fi
    fi
fi
samepwd=""
usesamepwd=0
puser="'$myuser'"
susers="user"
if [ $fnopassword -eq 0 ]
then
    [ ${raspiosver} -ge 11 ] && oldpios=0 || oldpios=1

    [ $oldpios -eq 1 -a "$myuser" != "pi" -a $frenamepi -eq 0 ] && puser="${puser} and 'pi'" && susers="users"        # Only ask about pi on older systems
    [ $rootpwd -eq 1 ] && puser="${puser} and 'root'" && susers="users"
    usesamepwd=$passwordsame
    if [ $usesamepwd -eq 0 -a "$susers" == "users" ]
    then
	askyn "** Use same password for $susers $puser" "-n 1" && usesamepwd=1
	echo ""
    elif [ $usesamepwd -eq 1 ]
    then
	[ "$susers" == "users" ] && logtoboth "> Using same password for $susers $puser"
	[ "$samepwd" == "" -a "$passworduser" != "" ] && samepwd="$passworduser" && logtoboth "> Using --password-user password for all passwords"
	[ "$samepwd" == "" -a "$passwordroot" != "" ] && samepwd="$passwordroot" && logtoboth "> Using --password-root password for all passwords"
	[ "$samepwd" == "" -a "$passwordpi" != "" ] && samepwd="$passwordpi" && logtoboth "> Using --password-pi '$passwordpi' for all passwords"
    fi
    if [ $usesamepwd -eq 1 -a "$samepwd" == "" ]
    then
	while [ true ]
	do
	    echo -n "** Enter password to use for $susers $puser: "
	    samepwd=$(getpwd)
	    echo ""
	    [ "$samepwd" != "" ] && break
	done
    fi
    if [ $usesamepwd -eq 0 -a "$passworduser" == "" ]
    then
	[ "$myuser" == "pi" -o $frenamepi -eq 1 ] && passworduser="$passwordpi"
    fi
    if [ "$myuser" != "" ]
    then
	[ "$myuid" != "" ] && xuid="--uid $myuid" || xuid=""
	# Use useradd/usermod so no prompts=adduser --disabled-login --no-create-home $xuid --add_extra_groups $myuser
	if ! grep -E "^${myuser}:" /etc/passwd > /dev/null 2>&1
	then
	    logtoboth "> Add user '$myuser'"
	    useradd --no-create-home --home-dir /home/$myuser $xuid $myuser
	    usermod --gid users $myuser
	    usermod --groups $groups $myuser
	else
	    if [ "$xuid" != "" ]
	    then
		logtoboth "> Set user '$myuser' UID to '$myid'"
		usermod $xuid $myuser
	    fi
	fi
	# Do this manually since we have to use --no-create-home (dir already created in Phase 0)
	for f in /etc/skel/.* /etc/skel/*
	do
	    [ -f $f ] && ( [ -f /home/$myuser/$(basename $f) ] || cp $f /home/$myuser )
	done
	[ "$samepwd" != "" ] && upwd="$samepwd" || upwd="$passworduser"
	changepwd $myuser "$upwd"
	[ ! -d /home/$myuser ] && mkdir /home/$myuser
	[ "$myuser" != "pi" ] && gr="users" || gr="pi"
	logtoboth "> Set /home/$myuser files ownership to '${myuser}:${gr}'"
	chown -R ${myuser}.${gr} /home/$myuser
	if [ ! -f /etc/sudoers.d/010_$myuser-nopasswd ]
	then
	    logtoboth "> Add user '$myuser' to sudoers.d"
	    echo "$myuser ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/010_$myuser-nopasswd
	    chmod 440 /etc/sudoers.d/010_$myuser-nopasswd
	fi
    fi
    if [ $oldpios -eq 1 ]
    then
	logtoboth "> Change user 'pi' password"
	[ "$samepwd" == "" ] && samepwd="$passwordpi"
	changepwd pi "$samepwd"
	logtoboth "> Set /home/pi files ownership to 'pi.pi'"
	chown -R pi.pi /home/pi
    fi
    if [ $rootpwd -eq 1 ]
    then
	logtoboth "> Set root password"
	[ $usesamepwd -eq 1 ] && rpwd="$samepwd" || rpwd="$passwordroot"
	changepwd root "$rpwd"
    else
	logtoboth "> root password not set"
    fi
else
    logtoboth "> Skip password processing per --nopassword"
fi
logtoboth "*+Phase 1 System and Boot Configuration"
#
# Handle system settings that can be done in Phase 1
#
setbootset
#
# Set HDMI configuration if requested
#
if [ "$hdmigroup" != "" -a "$hdmimode" != "" ]
then
    logtoboth "> Set 'hdmigroup=$hdmigroup' and 'hdmimode=$hdmimode' in /boot/config.txt"
    sed -i "s/\#hdmi_group=1/hdmi_group=$hdmigroup/" /boot/config.txt
    sed -i "s/\#hdmi_mode=1/hdmi_mode=$hdmimode/" /boot/config.txt
fi
if [ "$hdmiforcehotplug" == "1" ]
then
    logtoboth "> Set 'hdmi_force_hotplug=1' in /boot/config.txt"
    sed -i "s/\#hdmi_force_hotplug=1/hdmi_force_hotplug=1/" /boot/config.txt
fi
if [ "$hdmiignoreedid" == "1" ]
then
    logtoboth "> Set 'hdmi_ignore_edid=0xa5000080' in /boot/config.txt"
    sed -i '/hdmi_mode/a \\n# (sdm) Ignore EDID display data\nhdmi_ignore_edid=0xa5000080' /boot/config.txt
fi
#
# Set other config.txt settings (if any)
#
if [ "$bootconfig" != "" ]
then
    logtoboth "> Update /boot/config.txt for bootconfig: $bootconfig"
    IFS="," read -a citems <<< "$bootconfig"
    for c in "${citems[@]}"
    do
	IFS=":=" read key value <<< "$c"
	sed -i "s/\^$key=.*/$key=$value/" /boot/config.txt
	sed -i "s/\#$key=.*/$key=$value/" /boot/config.txt
	logtoboth ">  $key=$value"
    done
fi
if [ "$bootadd" != "" ]
then
    if ! grep -q 'Items added by sdm --bootadd' /boot/config.txt
    then
	logtoboth "> Add new keys to /boot/config.txt"
	logtoboth "> Update /boot/config.txt for bootadd: $bootadd"
	echo "# Items added by sdm --bootadd" >> /boot/config.txt
	IFS="," read -a citems <<< "$bootadd"
	for c in "${citems[@]}"
	do
	    IFS=":=" read key value <<< "$c"
	    echo "$key=$value" >> /boot/config.txt
	    logtoboth ">  $key=$value"
	done
	echo "# Above items added by sdm --bootadd" >> /boot/config.txt
    else
	logtoboth "> /boot/config.txt already updated for --bootadd; skipping"
    fi
fi
#
# Process --dtparm and --dtoverlay settings
#
dodt dtoverlay "$dtoverlay"
dodt dtparam   "$dtparam"
#
# Add requested command(s) to /etc/rc.local
#
if [ "$rclocal" != "" ]
then
    logtoboth "> Add commands to /etc/rc.local"
    grep -v 'exit 0' /etc/rc.local > /tmp/rc.local
    IFS="~" read -a citems <<< "$rclocal"
    for c in "${citems[@]}"
    do
	logtoboth "   $c"
	echo "$c" >> /tmp/rc.local
    done
    echo "exit 0" >> /tmp/rc.local
    mv /etc/rc.local /etc/rc.local.sdm
    mv /tmp/rc.local /etc
    chmod 755 /etc/rc.local
fi

#
# WiFi Country is done when the system first boots by sdm-firstboot
#
if [ "$locale" != "" ]
then
    logtoboth "> Set Locale to '$locale'"
    #raspi-config do_change_locale "$locale" nonint
    do_raspiconfig do_change_locale "$locale"
fi
if [ "$keymap" != "" ]
then
    logtoboth "> Set Keymap to '$keymap'"
    [ "$virtmode" == "chroot" ] && logtoboth ">!Ignore 'Running in chroot, ignoring request' message" || logtoboth ">!Ignore invoke-rc.d and 'Read-only file system' messages"
    #raspi-config do_configure_keyboard "$keymap" nonint
    do_raspiconfig  do_configure_keyboard "$keymap" 
fi
if [ "$timezone" != "" ]
then
    logtoboth "> Set Timezone to '$timezone'"
    #raspi-config do_change_timezone "$timezone" nonint
    do_raspiconfig do_change_timezone "$timezone" 
fi

if [ "$eeprom" != "" ]
then
    logtoboth "> Set rpi-eeprom to '$eeprom' during FirstBoot"
    cat > /etc/sdm/0piboot/030-rpi-eeprom.sh <<EOF
#!/bin/bash
logger "FirstBoot: Set rpi-eeprom to '$eeprom'"
sed /etc/default/rpi-eeprom-update -i -e "s/^FIRMWARE_RELEASE_STATUS.*/FIRMWARE_RELEASE_STATUS=\"$eeprom\"/"
EOF
    chmod 755 /etc/sdm/0piboot/030-rpi-eeprom.sh
fi

#
# Set up apt-cacher-ng client if requested
#
if [ "$aptcache" != "" ]
then
    $sdmdir/sdm-apt-cacher client $aptcache
    logtoboth "> Set image as apt-cacher-ng client using server $aptcache"
fi
#
# Disable cron service and enable cron timers if requsted
#
if [ $cronsystemd -eq 1 ]
then
    logtoboth "> Switch cron to systemd timers"
    cat > /etc/systemd/system/cron@.service <<EOF
[Unit]
Description=%I job for /etc/cron.%I
RefuseManualStart=yes
RefuseManualStop=yes
ConditionDirectoryNotEmpty=/etc/cron.%I

[Service]
Type=oneshot
IgnoreSIGPIPE=no
WorkingDirectory=/
ExecStart=/bin/run-parts --report /etc/cron.%I
EOF
    cat > /etc/systemd/system/cron@.timer <<EOF
[Unit]
Description=%I timer for /etc/cron.%I
PartOf=crontab.target
RefuseManualStart=yes
RefuseManualStop=yes

[Timer]
OnCalendar=%I
Persistent=yes
[Install]
WantedBy=timers.target
EOF
    for timeset in hourly daily monthly weekly
    do
	systemctl enable cron@${timeset}.timer  > /dev/null 2>&1
    done
    systemctl disable cron > /dev/null 2>&1
    systemctl mask    cron > /dev/null 2>&1
fi
#
# Set system journal as requested
#
case "$journal" in
    persistent|volatile|none)
	logtoboth "> Set system journal to '$journal' and disable rsyslog"
	mkdir -p /etc/systemd/journald.conf.d
	cat > /etc/systemd/journald.conf.d/030-sdm-journal.conf <<EOF
[Journal]
Storage=$journal
ForwardToSyslog=no
EOF
	systemctl disable rsyslog
	systemctl mask rsyslog
	;;
    syslog|*)
	logtoboth "> System journal configuration not modified"
	;;
esac
if [ $swapsize -gt 0 ]
then
    logtoboth "> Set Swap Size to ${swapsize}MB"
    sed -i "s/CONF_SWAPSIZE=.*/CONF_SWAPSIZE=$swapsize/" /etc/dphys-swapfile
else
    #
    # Disable swap if requested
    #
    [[ "$disables" =~ "swap" ]] && do_disables swap
fi
#
# Copy systemd config files to their locations
#
for c in login network resolve system timesync user
do
    nsdfn="sdfn${c}"
    fn="${!nsdfn}"
    if [ "$fn" != "" ]
    then
	tdir=$c
	[ "$c" != "system" -a "$c" != "user" ] && tdir="${tdir}d"
	logtoboth "> Copy systemd '$c' config file '$fn' from /etc/sdm/assets to /etc/systemd/$tdir.conf.d"
	mkdir -p /etc/systemd/$tdir.conf.d
	cp /etc/sdm/assets/$(basename $fn) /etc/systemd/$tdir.conf.d
    fi
done
#
# Disable Triggerhappy service if requested
#
[[ "$disables" =~ "triggerhappy" ]] && do_disables triggerhappy

if ! [[ "$poptions" =~ "noupdate" ]]
then
    logtoboth "> Start 'apt update'"
    logfreespace "at start of 'apt update'"
    doapt "update" $showapt || logapterror
    logfreespace "at end of 'apt update'"
else
    logtoboth "> Skip 'apt update' per --poption noupdate"
fi    

if [ "$cscript" != "" ]
then
    csfn="$sdmdir/$(basename $cscript)"
    logtoboth "> Run Custom Phase Script '$csfn' Phase 1" 
    $csfn 1
else
    csfn=""
fi
#
# Run requsted plugins Phase 1
#
if [ "$plugins" != "" ]
then
    runplugins 1
fi

#
# If --loadlocal wifi then disable dhcpcd now. Why wait 1:39 at boot time for nothing?
if [[ "$loadlocal" =~ "wifi" ]]
then
    logtoboth "> Disable dhcpcd per --loadlocal wifi"
    logtoboth "  dhcpcd will be re-enabled at the end of First Boot"
    systemctl disable dhcpcd
fi
#
# These are enabled by use of the --poptions switch
# For example: --poptions apps          installs your personal set of apps
#              --poptions apps:xwindows installs apps and XWindows apps
#
didapt=0
if [[ "$poptions" =~ "|apps|" ]]
then
    logfreespace "at start of Application Installs"
    if [[ "$virtmode" == "chroot" ]] && [[ "$apps" =~ "qemu-user-static" ]]
    then
	apps=${apps/qemu-user-static}
	deferqemu
    fi
    doinstalls "$apps" "Application Installs"
    [ "$apps" != "" ] && didapt=1
fi
if [[ "$poptions" =~ "xwindows" ]] || [[ "$poptions" =~ "xapps" ]]
then
    logfreespace "at start of xapp/XWindows Installs"
    doinstalls "$xapps" "xapp/XWindows Installs"
    [ "$xapps" != "" ] && didapt=1
    if [[ "$virtmode" == "chroot" ]] && [[ "$xapps" =~ "qemu-user-static" ]]
    then
	xapps=${xapps/qemu-user-static}
	deferqemu
    fi
    logfreespace "at end of xapp/XWindows Installs"
fi

#
# Post-install Configuration
#
logtoboth "* Phase 1 post-app/xapp installation/configuration"
#
# Network manager configuration
#
case "${netman,,}" in
    dhcpcd)
	logtoboth "> Set network manager dhcpcd"
	doapt "install --no-install-recommends --yes dhcpcd5" $showapt || logapterror
	do_raspiconfig do_netconf 1
	;;
    nm|network-manager)
	logtoboth "> Set network manager NetworkManager"
	doapt "install --no-install-recommends --yes network-manager" $showapt || logapterror
	do_raspiconfig do_netconf 2
	;;
esac

if [ "$hotspot" != "" ]
then
    $sdmdir/sdm-hotspot
fi

if ! [[ "$poptions" =~ "noupgrade" ]]
then
    [ $aptdistupgrade -eq 0 ] && upg="upgrade" || upg="dist-upgrade"
    logtoboth "> Start 'apt $upg'"
    logfreespace "at start of 'apt $upg'"
    upgkeepconf "-y" "$showapt" $aptdistupgrade
    logfreespace "at end of 'apt $upg'"
    didapt=1
else
    logtoboth "> Skip 'apt upgrade' per --poption noupgrade"
fi    
if [ $didapt -eq 1 ]
then
    if [[ ! "$poptions" =~ "noautoremove" ]]
    then
	logtoboth "> Start 'apt autoremove'"
	logfreespace "at start of 'apt autoremove'"
	doapt "--yes autoremove" $showapt || logapterror
	logfreespace "at end of 'apt autoremove'"
    else
	logtoboth "> Skip 'apt autoremove' per --poption noautoremove"
    fi
fi
#
# Honor --disable piwiz
#
[[ "$disables" =~ "piwiz" ]] && do_disables piwiz
#
# If lightdm installed switch to console no login for first boot
#  and set to switch back to graphical autologin after first boot
#
if [ -d /etc/lightdm ]
then
    [ $reboot -eq 1 ] && delaylightdmenable || setlightdmautologin
fi
#
# LXDE-specific handling
#
if [ -f /usr/bin/startlxde-pi ]
then
    userx=${myuser:-pi}	
    [ "$userx" == "pi" ] && gx=pi || gx=users
    # Set left-handed mouse if requested
    if [ $fmouse -eq 1 ]
    then
	logtoboth "> Enable left-handed mouse for user '$userx'"
	dirx="/home/$userx/.config/lxsession/LXDE-pi"
	mkdir -p $dirx
	cp /etc/xdg/lxsession/LXDE-pi/desktop.conf $dirx
	chmod 644 $dirx/desktop.conf
	sed -i "s/LeftHanded=0/LeftHanded=1/" $dirx/desktop.conf
    fi
    # Copy LXDE config files if requested
    for fm in $lxdeconflist
    do
	cname="${fm}conf"
	fmconf="${!cname}"
	if [ "$fmconf" != "" ]
	then
	    dirx="/home/$userx/.config/$fm"
	    logtoboth "> Copy --lxde-config $fm config file '$(basename $fmconf)' to '$dirx'"
	    mkdir -p $dirx
	    cp /etc/sdm/assets/$(basename $fmconf) $dirx/$fm.conf
	fi
    done
    if [ -d /home/$userx/.config ]
    then
	logtoboth "> Set owner to '$userx:$gx' and protection to 700 on '/home/$userx/.config' directory tree"
	chown -R $userx:$gx /home/$userx/.config
	chmod -R 700 /home/$userx/.config
    fi
fi
#
# If xdm installed, disable it on console if requested
#
bbhandled=0
if [ -d /etc/X11/xdm ]
then
    bbhandled=1
    # VV This overrides default LISTEN * ; 127.0.0.1 disables xdmcp finder, finder enabled with 0.0.0.0. By default xdmcp finder is enabled
    #echo "LISTEN 0.0.0.0" >> /etc/X11/xdm/Xaccess
    if [[ "$poptions" =~ "nodmconsole" ]]
    then
	logtoboth "> Disable xdm on console"
	sed -i "s/\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/\#\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/"  /etc/X11/xdm/Xservers
	[ -f /etc/sdm/0piboot/040-realvnc-server.sh ] && mv -f /etc/sdm/0piboot/040-realvnc-server.sh /etc/sdm/0piboot/.040-realvnc-server.sh
	systemctl set-default multi-user.target
    else
	delaydmenable xdm B3
    fi
    # xdm.service is missing the [Install] section. systemctl complains about it but it works
    # Keeping this code in case systemctl decides to fail the service b/c of this
#    if ! grep '\[Install\]' /lib/systemd/system/xdm.service > /dev/null 2>&1
#    then
#	logtoboth ">!Correcting broken /lib/systemd/system/xdm.service into /etc/systemd/system/xdm.service"
#	cp /lib/systemd/system/xdm.service /etc/systemd/system
#	cat >> /etc/systemd/system/xdm.service <<EOF
#
#[Install]
#WantedBy=graphical.target
#EOF
#    fi
fi
#
# Ditto for wdm
#

if [ -d /etc/X11/wdm ]
then
    bbhandled=1
    if [[ "$poptions" =~ "nodmconsole" ]]
    then
	logtoboth "> Disable wdm on console"
	sed -i "s/\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/\#\:0 local \/usr\/bin\/X :0 vt7 -nolisten tcp/"  /etc/X11/wdm/Xservers
	# RealVNC server operation with wdm unknown, so disable RealVNC 
	[ -f /etc/sdm/0piboot/040-realvnc-server.sh ] && mv -f /etc/sdm/0piboot/040-realvnc-server.sh /etc/sdm/0piboot/.040-realvnc-server.sh
	systemctl set-default multi-user.target
    else
	delaydmenable wdm B3
    fi
fi
#
# If Lite and no known display manager found set to console no login
#
if [ ! -d /etc/lightdm -a $bbhandled -eq 0 ]
then
    # Lite with no Desktop
    if [ $reboot -eq 1 ]
    then
	logtoboth "> Set RasPiOS to B1:'console no login' for First Boot"
	#SUDO_USER="$userx" raspi-config do_boot_behaviour B1 nonint > /dev/null 2>&1
	do_raspiconfig do_boot_behaviour B1
	if (grep '^boot_behav' /etc/sdm/1piboot.conf > /dev/null 2>&1) || (grep '^boot_behav' /etc/sdm/auto-1piboot.conf > /dev/null 2>&1)
	then
	    aval=$(getfinalbbh B1)
	    logtoboth ">%1piboot.conf|auto-1piboot.conf 'boot_behaviour' setting $aval will be honored after First Boot"
	    logtoboth "  Unpredictable results: no known display manager was found"
	else
	    [ $autologin -eq 1 ] && bbh="B2" || bbh="B1"
	    [ "$bbh" != "B1" ] && logtoboth ">%Console Autologin setting '$bbh' will be re-enabled after First Boot"
	    echo "delayed_boot_behavior=$bbh" >> /etc/sdm/auto-1piboot.conf
	fi
    fi
fi

logfreespace "at end of Phase 1 image customization"
logtoboth "* Phase 1 Completed"

if [ "$csfn" != "" ]
then
    logtoboth "> Run Custom Phase Script '$csfn' post-install"
    $csfn post-install
fi
#
# Run requested plugins
#
if [ "$plugins" != "" ]
then
    runplugins post-install
fi
#
# Redact passwords if requested
#
if [ $redact -eq 1 ]
then
    logtoboth "> Redact passwords from /etc/sdm/cparams and /etc/sdm/history"
    for pwd in "$passworduser" "$passwordroot" "$passwordpi"
    do
	if [ "$pwd" != "" ]
	then
	    sed -i "s/$pwd/REDACTED/" /etc/sdm/cparams
	    sed -i "s/$pwd/REDACTED/" /etc/sdm/history
	fi
    done
fi
#
# Check for device out of space and warn if so
#
cklogfreespace "at end of image customization"
#
# Check for apt errors in the apt log
#
grep -q "^E:" /etc/sdm/apt.log && logtoboth "?!apt reported errors; review /etc/sdm/apt.log"

if [ $fbatch -eq 0 ]
then
    if [ -t 0 ]
    then
	logtoboth "* Enter Shell Command Prompt"
	IFS=":" read efg ebg ecursor <<< $ecolors
	stermcolors "$efg" "$ebg" "$ecursor" x1
	bash -i
	logtoboth "* Customization complete"
	resetcolors x1
    else
	logtoboth "* Run bash on non-terminal standard input"
	bash
    fi
else
    logtoboth "* Customization complete"
    logtoboth "* Batch Mode exit"
fi
exit 0
