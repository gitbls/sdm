#!/bin/bash
#
# This file is sourced by other sdm scripts
#

#
# Common functions 
#
function logit {
    #
    # Writes message to /etc/sdm/history
    #
    # $1="message string"
    #
    local mnt=""
    [[ "Phase0|Burn0" =~ "$SDMNSPAWN" ]] && mnt="$SDMPT"
    [ -f $mnt/etc/sdm/history ] && echo "$(thisdate) $1" >> $mnt/etc/sdm/history
}

function logtoboth {
    #
    # Writes the message to the terminal and also to /etc/sdm/history
    #
    # $1="message string" which will be split up across multiple lines if needed
    # $2="nosplit" if lines should not be split up
    #
    local msg="$1"
    local str=() i spc=""
    if [ ${#msg} -le $logwidth -o "$2" == "nosplit" ]
    then
	logit "$msg"
	echo "$msg"
    else
	readarray -t str <<< $(fold -s -w$logwidth <<< $(echo $msg))
	for (( i=0 ; i < ${#str[@]} ; i++))
	do
	    logit "${spc}${str[$i]}"
	    echo "${spc}${str[$i]}"
	    spc="  "
	done
    fi	
}

function bootlog() {
    # Write string in $1 to the system log/journal and /etc/sdm/history.log
    logger "FirstBoot: $1"
    logit "> FirstBoot $1"
}

function getpwd() {
    local tmp
    read -s tmp
    echo "$tmp"
}

function changepwd() {
    local user="$1" tpwd="$2" upwd
    if ! grep -q -E "^${user}:" /etc/passwd > /dev/null 2>&1
    then
	logtoboth "% Cannot change password for ${user}; user not found in /etc/passwd"
	return
    fi
    if [ "$tpwd" == "" ]
    then
        echo -n "Password for user '$user': " && read -s upwd
        echo ""
    else
        upwd="$tpwd"
    fi
    chpasswd <<EOF
$user:$upwd
EOF
    [ $showpwd -eq 1 ] && logit "> Set password for user '$user' to '$upwd'" || logit "> Set password for user '$user'"
}

function askyn() {
    local ans
    echo -n "$1" '[y/n]? ' ; read $2 ans
    case "$ans" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

function outlong () {
    #
    # Write the string in $1 to the file in $2
    # If the line is too long, it will be split up
    #
    local str=() i spc=""
    if [ ${#1} -le 96 ]
    then
	echo "$(date +'%Y-%m-%d %H:%M:%S') $1" >> $2
    else
	readarray -t str <<< $(fold -s -w96 <<< $(echo $1))
	for (( i=0 ; i < ${#str[@]} ; i++))
	do
	    echo "$(date +'%Y-%m-%d %H:%M:%S') ${spc}${str[$i]}" >> $2
	    spc="  "
	done
    fi
}

function doapt() {
    #
    # $1 is apt command
    # $2 is $showapt value
    #
    echo "" >> /etc/sdm/apt.log
    outlong "apt $1" "/etc/sdm/apt.log"
    echo "" >> /etc/sdm/apt.log
    if [ "$2" == "1" ]
    then
	DEBIAN_FRONTEND=noninteractive apt-get -qq -o=Dpkg::Use-Pty=0 $1 2>&1 | tee -a /etc/sdm/apt.log
    else
	DEBIAN_FRONTEND=noninteractive apt-get -qq -o=Dpkg::Use-Pty=0 $1 >> /etc/sdm/apt.log 2>&1
    fi
}

function ispkginstalled() {
    #
    # $1 has package name
    #
    iver=$(apt-cache policy $1 | grep Installed: 2> /dev/null)
    if [ "$iver" == "" ]
    then
        return 1
    else
        [[ "$iver" =~ "(none)" ]] && return 1 || return 0
    fi
    return
}

function thisdate() {
    echo  "$(date +"$datefmt")"
}

function ord() {
    #
    # Returns the value in decimal of the character in $1
    # e.g. c="a" ; echo $(ord $c) will print 97
    #
    printf '%d' "'$1"
}

function getfsdf() {
    #
    # $1: fs name
    # $2: df component: pcent, avail, etc
    #
    echo $(df --output=$2 $1 | tail -1 | (IFS="%" ; read a ; a="${a% }" ; a="${a# }" echo $a))
}

function logfreespace() {
    #
    # Logs the current free space on $dimg
    #
    local dev="/" extramsg="$1"
    [[ "Phase0|Burn0" =~ "$SDMNSPAWN" ]] && dev="$SDMPT"
    logtoboth "> $dimgdevname '$dimg' has $(getfsdf $dev avail) 1K-blocks free $extramsg" nosplit
}

function cklogfreespace() {
    #
    # Report if IMG looks full. If not, just log free space
    #
    local dused=$(getfsdf / pcent) extramsg="$1"
    if [ $dused -ge 98 ]
    then
	logtoboth "%%%"
	logtoboth "% $dimgdevname '$dimg' is ${dused}% full ($(getfsdf / avail) 1K-blocks free)" nosplit
	logtoboth "% Review /etc/sdm/apt.log in the image for insufficient disk space errors" nosplit
	logtoboth "% If needed use --extend --xmb nnnn with --customize to create more space" nosplit
	logtoboth "%%%"
    else
	logfreespace "$extramsg"
    fi
}
    
function configitemlog() {
    # $1: Message
    # $2: function to call
    local msg=$1 fn=$2
   if [ "$fn" != "" ]
    then
	[ "$(type -t "$fn")" == "function" ] && $fn "$msg" || echo "% Unrecognized config item log function: $fn"
    fi
}

function doconfigitem() {
    #
    # $1: function keyword
    # $2: value
    # $3: "" or "bootlog" (first boot) or "logtoboth" (phase1)
    local rpifun=$1 value=$2 msgfn=$3
    case "$rpifun" in
	# * do_resolution still needs to be sorted out
	serial)
	    configitemlog "Set Serial Port to '$value'" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_serial $value nonint
	    do_raspiconfig do_serial $value nonint
	    ;;
	service-enable)
	    configitemlog "Enable Service '$value'" $msgfn
	    systemctl enable $value
	    ;;
	service-disable)
	    configitemlog "Disable Service '$value'" $msgfn
	    systemctl disable $value
	    ;;
	delayed_boot_behavior)
	    # Processed at the very end of FirstBoot
	    ;;
	boot_behavior|boot_behaviour)  # Allow US spelling as well ;)
	    configitemlog "set boot_behaviour to '$value'" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_boot_behaviour $value nonint
	    do_raspiconfig do_boot_behaviour $value
	    ;;
	powerled)
	    ssys=0
	    (grep -q "\\[actpwr\\]" /sys/class/leds/led0/trigger > /dev/null 2>&1) && ssys=1
	    (grep -q "\\[default-on\\]" /sys/class/leds/led0/trigger > /dev/null 2>&1) && ssys=1
	    if [ $ssys -eq 1 ]
	    then
		configitemlog "Set Power LED to '$value'" $msgfn
		#SUDO_USER=${myuser:-pi} raspi-config do_leds $value nonint
		do_raspiconfig do_leds $value
	    else
		configitemlog "This Pi does not support setting the Power LED; Skipped" $msgfn
	    fi
	    ;;
	audio|pi4video|boot_splash|boot_order|\
	    spi|i2c|boot_wait|net_names|overscan|blanking|\
	    pixdub|overclock|rgpio|camera|onewire)
	    # These are simple on/off and less commonly used so no elaborate logging for them
	    configitemlog "Set $rpifun to '$value'" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_$rpifun $value nonint
	    do_raspiconfig do_$rpifun $value 
	    ;;
	#
	# fstab, keymap, locale, and timezone may be set via sdm --burn command
	#
	# dhcpcd not currently used by sdm, keep for future just in case
	dhcpcd)
	    configitemlog "Append dhcpcd.conf extension '$value' to /etc/dhcpcd.conf" $msgfn
	    cat /etc/sdm/assets/$value >> /etc/dhcpcd.conf
	    ;;
	fstab)
	    configitemlog "Append fstab extension '$value' to /etc/fstab" $msgfn
	    cat /etc/sdm/assets/$value >> /etc/fstab
	    ;;
	keymap)
	    configitemlog "Set Keymap to '$value' (!Ignore invoke-rc.d messages)" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_configure_keyboard "$value" nonint
	    do_raspiconfig do_configure_keyboard "$value"
	    ;;
	locale)
	    configitemlog "Set Locale to '$value'" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_change_locale "$value" nonint
	    do_raspiconfig do_change_locale "$value"
	    declare -x LANG="$value"
	    ;;
	timezone)
	    configitemlog "Set Timezone to '$value'" $msgfn
	    #SUDO_USER=${myuser:-pi} raspi-config do_change_timezone "$value" nonint
	    do_raspiconfig do_change_timezone "$value" 
	    ;;
	*)
	    configitemlog "% Unrecognized option '$rpifun'" $msgfn
	    ;;
    esac

}

function writeconfig() {
    #
    # Write config parameters into the image
    #
    local paramfile="$SDMPT/etc/sdm/cparams"
    [ -f $paramfile ] && rm -f $paramfile
    cat > $paramfile <<EOF
#Arguments passed from sdm into the IMG on $(date +'%Y-%m-%d %H:%M:%S')
version:$version
apps:"$apps"
xapps:"$xapps"
appfile:$appfile
xappfile:$xappfile
apip:$apip
apssid:$apssid
aptcache:$aptcache
aptdistupgrade:$aptdistupgrade
autologin:$autologin
batch:$fbatch
b0script:$b0script
b1script:$b1script
bootadd:$bootadd
bootconfig:$bootconfig
bootscripts:$bootscripts
bootsetpairs:"$bootsetpairs"
crond:$crond
cronhourly:$cronhourly
crondaily:$crondaily
cronweekly:$cronweekly
cronmonthly:$cronmonthly
cronsystemd:$cronsystemd
cscript:$cscript
csrc:$csrc
datefmt:$datefmt
dhcpcd:$dhcpcd
dhcpcdwait:$dhcpcdwait
dimg:$dimg
dimgdev:$dimgdev
dimgdevname:$dimgdevname
disables:$disables
domain:$domain
dtoverlay:$dtoverlay
dtparam:$dtparam
ecolors:$ecolors
eeprom:$eeprom
expandroot:$expandroot
exports:$exports
fdirtree:$fdirtree
fgadgetmode:$fgadgetmode
fmouse:$fmouse
fstab:$fstab
hdmiforcehotplug:$hdmiforcehotplug
hdmiignoreedid:$hdmiignoreedid
hdmigroup:$hdmigroup
hdmimode:$hdmimode
hostname:$hostname
hotspot:$hotspot
journal:$journal
keymap:$keymap
libfmconf:$libfmconf
loadlocal:$loadlocal
locale:$locale
logwidth:$logwidth
lxdeconflist:"$lxdeconflist"
lxterminalconf:$lxterminalconf
modprobe:$modprobe
motd:$motd
groups:$groups
myuid:$myuid
myuser:$myuser
nouser:$nouser
os:$os
passwordpi:$passwordpi
passwordroot:$passwordroot
passwordsame:$passwordsame
passworduser:$passworduser
pcmanfmconf:$pcmanfmconf
pi1bootconf:$pi1bootconf
poptions:$poptions
rclocal:$rclocal
reboot:$reboot
regensshkeys:$regensshkeys
noreboot:$noreboot
rebootwait:$rebootwait
redocustomize:$redocustomize
rootpwd:$rootpwd
sdfnlogin:$sdfnlogin
sdfnnetwork:$sdfnnetwork
sdfnresolve:$sdfnresolve
sdfnsystem:$sdfnsystem
sdfntimesync:$sdfntimesync
sdfnuser:$sdfnuser
sdmdir:$sdmdir
showapt:$showapt
showpwd:$showpwd
src:$src
ssh:$ssh
swapsize:$swapsize
svcdisable:"$svcdisable"
svcenable:"$svcenable"
sysctl:$sysctl
timezone:$timezone
udev:$udev
vnc:$vnc
vncbase:$vncbase
wificountry:$wificountry
wpaconf:$wpaconf
fnowpa:$fnowpa
custom1:$custom1
custom2:$custom2
custom3:$custom3
custom4:$custom4
thishost:$thishost
EOF
}

function setbootset() {
    #
    # Handle --bootset, --svcdisable and --svcenable for customize and burn commands
    # Can be called from Burn (SDMNSPAWN==Burn) or Phase1
    # If from Burn, changes are written to auto-1piboot.conf since not in an nspawn
    #
    local mnt=""
    [[ "Phase0|Burn0" =~ "$SDMNSPAWN" ]] && mnt="$SDMPT"
    local citems=() c key value
    if [ "$bootsetpairs" != "" ]
    then
	readarray -d, citems <<< $bootsetpairs
	for c in ${citems[@]}
	do
	    IFS=":=" read key value <<< $c
	    key="${key%,}"      #In case they didn't specify :value or =value we'll default it to 0
	    value="${value%,}"
	    [ "$value" == "" ] && value=0
	    if [[ "$SDMNSPAWN" =~ "Burn" ]]
	    then
		# Remove any old entry for this key and write the new one
		if ! grep "$key=$value" $mnt/etc/sdm/auto-1piboot.conf > /dev/null 2>&1
		then
		    logtoboth "> Set --bootset ${key} ${value}"
		    sed -i "/^$key=/d" $mnt/etc/sdm/auto-1piboot.conf
		    echo "$key=$value" >> $mnt/etc/sdm/auto-1piboot.conf
		fi
	    else
		doconfigitem $key $value logtoboth
	    fi
	done
    fi
    if [ "$svcdisable" != "" ]
    then
	readarray -d, citems <<< $svcdisable
	for c in ${citems[@]}
	do
	    if [[ "$SDMNSPAWN" =~ "Burn" ]]
	    then
		sed -i "/^service-enable=${c%,}/d" $mnt/etc/sdm/auto-1piboot.conf   #Delete enables of this service
		if ! grep "service-disable=${c%,}" $mnt/etc/sdm/auto-1piboot.conf > /dev/null 2>&1
		then
		    logtoboth "> Disable service '${c%,}'"
		    echo "service-disable=${c%,}" >> $mnt/etc/sdm/auto-1piboot.conf
		fi
	    else
		logtoboth "> Disable service '${c%,}'"
		systemctl disable ${c%,} > /dev/null 2>&1
		systemctl mask ${c%,} > /dev/null 2>&1
	    fi
	done
    fi
    if [ "$svcenable" != "" ]
    then
	readarray -d, citems <<< $svcenable
	for c in ${citems[@]}
	do
	    if [[ "$SDMNSPAWN" =~ "Burn" ]]
	    then
		sed -i "/^service-disable=${c%,}/d" $mnt/etc/sdm/auto-1piboot.conf  #Delete disables of this service
		if ! grep "service-enable=${c%,}" $mnt/etc/sdm/auto-1piboot.conf > /dev/null 2>&1
		then
		    logtoboth "> Enable service '${c%,}'"
		    echo "service-enable=${c%,}" >> $mnt/etc/sdm/auto-1piboot.conf
		fi
	    else
		logtoboth "> Enable service '${c%,}'"
		systemctl unmask ${c%,} > /dev/null 2>&1
		systemctl enable ${c%,} > /dev/null 2>&1
	    fi
	done
    fi

}

function do_raspiconfig() {
    #
    # $1=command
    # $2=value
    local cmd=$1 value=$2
    if type -P raspi-config > /dev/null
    then
	SUDO_USER=${myuser:-pi} raspi-config $cmd "$value" nonint # prefer to not block outputs! > /dev/null 2>&1
    else
	logtoboth ">!Unable to find raspi-config for function '$cmd' with value '$value'"
    fi
}

function gterm1() {
    #
    # $1: control (10:foreground, 11:background, 12:cursor, 13:mousefg, 14:mousebg)
    # $2 varname to set
    #
    local vname="$2" cval
    # Query the xterm for the attribute and read result
    echo -e -n "\e]$1;?\a"
    read -s  -N 40 -t 0.1 cval
    # Trim response to just the color string and return it in the named variable
    cval="${cval:2:${#cval}-3}"   # Strip off ESC] at beginning and ctrl-g at end of string
    cval="${cval##*;}"            # Strip off leading semi-colon
    printf -v "$vname" "%s" "$cval" #eval "${vname}=\"$cval\""     # Define a variable for the value
}

function gtermcolors() {
    #
    # Query the xterm for the current terminal colors (cursor, bg, fg)
    # Return in the value named in ${1}cursor ${1}bg ${1}fg (rgb:xxxx/xxxx/xxxx)
    #
    gterm1 10 "${1}fg"
    gterm1 11 "${1}bg"
    gterm1 12 "${1}cursor"
}

function stermcolors() {
    #
    # Arguments are positional, but optional. e.g., "" "" "00" will set only the cursor
    # $1 - foreground
    # $2 - background
    # $3 - cursor
    # $4 - (optional) name of string for saving current colors (see gtermcolors)
    #
    local os=""
    [ "$4" != "" ] && gtermcolors "$4"
    [ "$1" != "" ] && os="\e]10;$1\a"
    [ "$2" != "" ] && os="${os}\e]11;$2\a"
    [ "$3" != "" ] && os="${os}\e]12;$3\a"
    printf "$os"
}

function resetcolors() {
    #
    # Set all colors saved from stermcolors
    #
    local tfg tbg tcursor
    # old way: eval "tfg=\$${1}fg ; tbg=\$${1}bg ; tcursor=\$${1}cursor"
    tfgn="${1}fg" ; tbgn="${1}bg" ; tcn="${1}cursor" 
    printf -v tfg "%s" "${!tfgn}" 
    printf -v tbg "%s" "${!tbgn}"
    printf -v tcursor "%s" "${!tcn}"
    stermcolors "$tfg" "$tbg" "$tcursor"
}

function flashled0() {
    echo 1 | tee /sys/class/leds/led0/brightness > /dev/null 2>&1
    sleep $1
    echo 0 | tee /sys/class/leds/led0/brightness > /dev/null 2>&1
    sleep .2
}

function morseled() {
    local msg="$1"
    local dit=".2" dot=".6" inter=".5"
    for (( i=0 ; i<${#msg} ; i++))
    do
	case "${msg:$i:1}" in
	    .) flashled0 $dit ;;
	    -) flashled0 $dot ;;
	    " ") sleep $inter ;;
	esac
	
    done
}

function iponline() {
    #
    # Test if IP address $1 is online
    # Returns 0 if online, 1 if offline
    #
    local pcnt=1 pingwait=1
    if (ping -c $pcnt -W $pingwait $1 > /dev/null 2>&1 )
    then
	return 0
    else
	return 1
    fi
}

function ckkeymap() {
    [ "$1" == "" ] && return 0
    (grep "^  ${1} " /usr/share/doc/keyboard-configuration/xorg.lst > /dev/null 2>&1) && return 0 || return 1
}

function cklocale() {
    [ "$1" == "" ] && return 0
    (grep "^${1}" /usr/share/i18n/SUPPORTED > /dev/null 2>&1) && return 0 || return 1
    return 0
}

function ckwificountry() {
    [ "$1" == "" ] && return 0
    (grep "^${1}" /usr/share/zoneinfo/iso3166.tab > /dev/null 2>&1) && return 0 || return 1
}

function cktimezone() {
    [ "$1" == "" ] && return 0
    [ -e /usr/share/zoneinfo/$1 ] && return 0 || return 1
}
